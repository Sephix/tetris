{"version":3,"sources":["assets/Grid.js","components/LeftInfo.js","components/RightInfo.js","components/Controls/Button.js","game/settings.js","game/cellCollection.js","game/Cell.js","game/Grid.js","actions/index.js","actions/types.js","loop/keybind.js","loop/animations/fillGrid.js","loop/animations/emptyGrid.js","loop/animations/fillInFillOut.js","loop/index.js","loop/animations/lostAnimation.js","loop/animations/rowDestruction.js","loop/actions.js","components/Controls/Controls.js","components/CenterGrid.js","components/Layout.js","reducers/index.js","reducers/gridReducer.js","reducers/nextCellReducer.js","reducers/savedCellReducer.js","reducers/gameStateReducer.js","reducers/gameLevelReducer.js","reducers/gameScoreReducer.js","index.js"],"names":["Grid","_ref","grid","id","className","react_default","a","createElement","map","r","i","key","concat","c","ci","LeftInfo","_this$props","this","props","savedCell","nextCell","assets_Grid","React","Component","connect","RightInfo","gameState","gameLevel","gameScore","mousedownID","inputType","Button","children","type","input","action","mouseUp","event","clearInterval","handleButtonPress","e","document","addEventListener","setInterval","onTouchStart","onMouseDown","WIDTH","ONE","TWO","FOUR","SIX","BLACK","GAME_BLANK","LOOSE","blank","one","two","three","four","five","six","seven","Cell","deadGrid","arguments","length","undefined","Object","classCallCheck","cell","isAlive","cellHeight","cellWidth","rowPos","randomCellSelection","findCellSize","colPos","Math","floor","random","willCollide","prevCol","setLost","prevRow","newCell","Cells","sq","tempCell","j","currentCell","row","col","HEIGHT","nbRow","console","log","k","l","previousCell","livingCell","intScore","score","previousScore","level","generateGrid","lost","n","tempGrid","square","reduce","tab","index","filter","toConsumableArray","lineToDestruct","reverse","forEach","line","setScore","splice","genGrid","refreshGrid","payload","refreshNextCell","buttonId","z","q","s","d","keyList","keyPressedId","lastKeyPressed","handleKeyPress","toLowerCase","handleKeyUp","getElementById","game","some","classList","remove","clearTimeout","fillGrid","gameGrid","seq","lastAnim","requestAnimationFrame","fillGridAnimation","timestamp","store","dispatch","emptyGrid","sequence","incrementSequence","isSavedCell","isStarted","isPaused","setInitValues","addCell","reset","anim","fillInFillOutAnim","setAnim","fillInFillOut","value","last","loop","dif","current","start","paused","onkeypress","onkeyup","count","rowDestruction","rowDestructionAnimation","currentFrame","handleRowDestruction","move","resetRow","wipeActiveGrid","moveDown","moveRight","moveLeft","rotate","setTimeout","lostAnim","blinkLoose","lostAnimationLoop","lostAnimation","renderCelltoGrid","shouldGridDestruct","getTempGrid","Controls","onClick","Controls_Button","CenterGrid","Layout","components_LeftInfo","components_CenterGrid","components_RightInfo","components_Controls_Controls","combineReducers","state","__webpack_require__","__webpack_exports__","createStore","reducers","ReactDom","render","es","components_Layout","querySelector"],"mappings":"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","file":"static/js/main.44bf3bb9.chunk.js","sourcesContent":["import React  from 'react';\n\nimport './grid.css';\n\nconst Grid = ({grid, id, className}) => {\n    return(\n        <div className={className}>\n            {grid.map((r,i) => <p className=\"grid\" key={`${id}r${i}`}>{ r.map( (c, ci) => <b className={c} key={`${id}${i}${ci}`}/>)}</p> )}\n        </div>\n    )\n};\n\nexport default Grid;","import React from 'react';\nimport Grid from \"../assets/Grid\";\nimport {connect} from \"react-redux\";\n\nclass LeftInfo extends React.Component{\n\n    render() {\n        const { savedCell, nextCell } = this.props;\n        return(\n            <div className=\"left-info\">\n                <div className=\"next-cell\">\n                    <Grid grid={nextCell} id=\"R\"/>\n                    <p>Next</p>\n                </div>\n                <div className=\"save-cell\">\n                    <p>Saved</p>\n                    <Grid grid={savedCell} id=\"G\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({savedCell, nextCell}) =>{\n    return {\n        savedCell,\n        nextCell\n    }\n};\nexport default connect(mapStateToProps)(LeftInfo);","import React from 'react';\nimport { connect } from \"react-redux\";\n\nclass RightInfo extends React.Component{\n\n    render() {\n        const { gameState, gameLevel, gameScore } = this.props;\n        return(\n            <div className=\"right-info\">\n                <div>\n                    {gameState === '' ? 'Appuyer sur Start' : gameState}\n                </div>\n                <div>\n                    Level: {gameLevel}\n                </div>\n                <div>\n                    Score: {gameScore}\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = ({ gameState, gameLevel, gameScore }) =>{\n    return {\n        gameState,\n        gameLevel,\n        gameScore\n    }\n};\nexport default connect(mapStateToProps)(RightInfo);","import React from 'react';\n\n//Gobal states\nlet mousedownID = -1;\nlet listeners = false;\nlet inputType = null;\n\nconst Button = ({children, type, input, action, id}) => {\n\n    const mouseUp = (event) => {\n        if(mousedownID!==-1) {  //Only stop if exists\n            clearInterval(mousedownID);\n            mousedownID=-1;\n        }\n    };\n\n    const handleButtonPress = (e, input) =>{\n        if(inputType === null ) inputType = e.type;\n        if(type === \"single\"){\n            if (e.type === inputType) action(input);\n        }\n        else if(type === \"repeat\"){\n            if(!listeners){\n                document.addEventListener(\"mouseup\", mouseUp);\n                document.addEventListener(\"mouseout\", mouseUp);\n                document.addEventListener(\"touchleave\", mouseUp);\n                document.addEventListener(\"touchcancel\", mouseUp);\n                document.addEventListener(\"touchend\", mouseUp);\n            }\n            if (e.type === inputType) action(input);\n            if(mousedownID===-1)  //Prevent multiple loops!\n                mousedownID = setInterval(() => action(input), 100);\n        }\n    };\n\n    return(\n        <span id={id} className=\"video-game-button\" onTouchStart={(e) => handleButtonPress(e, input)} onMouseDown={(e) => handleButtonPress(e, input)}>\n            {children}\n        </span>\n    )\n};\n\nexport default Button;","//Game Settings\nexport const HEIGHT = 20;\nexport const WIDTH = 10;\n\n//Color Settings;\nexport const BACKGROUND_COLOR = \"white\";\n\n//Cell colors\nexport const ONE = \"green\";\nexport const TWO = \"blue\";\nexport const THREE = \"orange\";\nexport const FOUR = \"purple\";\nexport const FIVE = \"cyan\";\nexport const SIX = \"yellow\";\nexport const SEVEN = \"red\";\n\nexport const BLACK = \"black\";\n\n//Blank Grid\nexport const GAME_BLANK = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n]);\n\nexport const LOOSE = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n]);","import {BACKGROUND_COLOR, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN} from \"./settings\";\n\nexport const blank = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n]);\n\nexport const one = ([\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const two = ([\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const three = (\n    [[BACKGROUND_COLOR, THREE, THREE, BACKGROUND_COLOR],\n    [THREE, THREE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]]\n);\n\nexport const four = ([\n    [FOUR, FOUR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, FOUR, FOUR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const five = ([\n    [BACKGROUND_COLOR, FIVE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [FIVE, FIVE, FIVE, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const six = ([\n    [SIX, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [SIX, SIX, SIX, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const seven = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, SEVEN, BACKGROUND_COLOR],\n    [SEVEN, SEVEN, SEVEN, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);","import {BACKGROUND_COLOR, WIDTH, HEIGHT} from \"./settings\";\n\nimport * as Cells from \"./cellCollection\";\n\nclass Cell{\n    static previousCell = null;\n\n    cell = [[]];\n    isAlive = true;\n\n    cellHeight = 0;\n    cellWidth = 0;\n    rowPos = -1;\n\n    constructor (deadGrid = null){\n        this.randomCellSelection();\n        this.findCellSize();\n        this.colPos = Math.floor(Math.random() * (WIDTH - this.cellWidth+1));\n        if (deadGrid && this.willCollide(deadGrid, this.rowPos+1,this.colPos)) this.cell = null;\n    }\n\n    moveLeft(deadGrid){\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos-1)){\n            this.prevCol = this.colPos;\n            this.colPos--;\n        }\n    }\n\n    moveRight(deadGrid){\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos+1)){\n            this.prevCol = this.colPos;\n            this.colPos++;\n        }\n    }\n\n    moveDown(grid){\n        if (this.willCollide(grid.deadGrid, this.rowPos+1, this.colPos)) {\n            this.isAlive = false;\n            if(this.rowPos < this.cellHeight-1) grid.setLost();\n        }\n        else {\n            this.prevRow = this.rowPos;\n            this.rowPos += 1;\n        }\n    }\n\n    rotate(deadGrid){\n        let newCell = Cells.blank.map(r => r.map(sq => sq));\n        let tempCell = this.cell.map(r => r.map(sq => sq));\n\n        for(let i = this.cellHeight; i > 0; i--){\n            for(let j = this.cellWidth; j > 0; j--){\n                newCell[this.cellWidth- j][this.cellHeight - i] = tempCell[i-1][this.cellWidth - j];\n            }\n        }\n        let currentCell = this.cell.map(r => r.map(sq => sq));\n        this.cell = newCell.map(r => r.map(sq => sq));\n        this.findCellSize();\n        for(let i = 0; i < this.cellWidth; i++){\n            if(!this.willCollide(deadGrid, this.rowPos, this.colPos-i)){\n                this.colPos -= i;\n                break;\n            }\n        }\n        if(this.willCollide(deadGrid, this.rowPos, this.colPos)){\n            this.cell = currentCell.map(r => r.map(sq => sq));\n            this.findCellSize();\n        }\n    }\n\n    willCollide(deadGrid, row, col){\n        if (WIDTH - this.cellWidth < col || col < 0 || row > HEIGHT-1)\n            return true;\n        let nbRow = (this.cellHeight-1 > row) ? row+1 : this.cellHeight;\n        for (let i = 0; i < nbRow; i++){\n            for (let j = 0; j < this.cellWidth; j++){\n                if(deadGrid[row - i][col + j] !== BACKGROUND_COLOR &&\n                    this.cell[this.cellHeight-1 - i][j] !== BACKGROUND_COLOR){\n                    return true;\n                }\n            }\n        }\n        if(row === -1) {\n            console.log(nbRow);\n            for (let j = 0; j < this.cellWidth; j++){\n                if(deadGrid[0][col + j] !== BACKGROUND_COLOR &&\n                    this.cell[this.cellHeight-1][j] !== BACKGROUND_COLOR){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    findCellSize (){\n        //Cell Height\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if (this.cell[i][j] !== BACKGROUND_COLOR) {\n                    this.cellHeight = i+1;\n                }\n            }\n        }\n        //Cell Width\n        for (let k = 0; k < 4; k++) {\n            for (let l = 0; l < 4; l++) {\n                if (this.cell[l][k] !== BACKGROUND_COLOR) {\n                    this.cellWidth = k+1;\n                }\n            }\n        }\n    }\n\n    resetRow(){\n        this.rowPos = -1;\n    }\n    randomCellSelection (){\n        let random = null;\n        do {\n            random = Math.floor(Math.random() * Math.floor(7));\n        } while (random === Cell.previousCell);\n        Cell.previousCell = random;\n        switch (random) {\n            case 0:\n                this.cell = Cells.one;\n                break;\n            case 1:\n                this.cell = Cells.two;\n                break;\n            case 2:\n                this.cell = Cells.three;\n                break;\n            case 3:\n                this.cell = Cells.four;\n                break;\n            case 4:\n                this.cell = Cells.five;\n                break;\n            case 5:\n                this.cell = Cells.six;\n                break;\n            case 6:\n                this.cell = Cells.seven;\n                break;\n            default:\n        }\n    }\n}\n\nexport default Cell;","import {HEIGHT, WIDTH, BACKGROUND_COLOR} from \"./settings\";\n\nclass Grid {\n    livingCell = false;\n    intScore = 0;\n    score = 0;\n    previousScore = 0;\n    level = 1;\n    constructor(){\n        this.grid = Grid.generateGrid([]);\n        this.deadGrid = Grid.generateGrid([]);\n        this.lost = false;\n    }\n\n    setScore(n){\n        this.score += n * this.level;\n        this.intScore += n;\n        if (this.intScore > this.previousScore + 50){\n            this.level++;\n            this.previousScore += 50 + (this.intScore - (this.previousScore+50));\n        }\n    }\n\n    setLost(){\n        this.lost = true;\n    }\n\n    wipeActiveGrid(){\n        this.grid = this.deadGrid.map(r => r.map(c => c));\n    }\n\n    renderCelltoGrid(Cell){\n        if(this.livingCell && !this.lost){\n            let { cell, cellHeight, cellWidth, rowPos, colPos, isAlive} = Cell;\n            if (isAlive){\n                let tempGrid = this.deadGrid.map(r => r.map(c => c));\n                let nbRow = (cellHeight-1 > rowPos) ? rowPos+1 : cellHeight;\n                for (let i = 0; i < nbRow; i++){\n                    for (let j = colPos; j < colPos + cellWidth; j++){\n                        if(cell[cellHeight-1 - i][j - colPos] !== BACKGROUND_COLOR){\n                            tempGrid[rowPos-i][j] = cell[cellHeight-1 - i][j - colPos];\n                        }\n                    }\n                }\n                this.grid = tempGrid;\n            }\n            else if (!isAlive) {\n                this.deadGrid = this.grid.map(r => r.map(c => c));\n            }\n        }\n    }\n\n    addCell(){\n        if(!this.livingCell && !this.lost){\n            this.livingCell = true;\n        }\n    }\n\n    static generateGrid(grid){\n        let genGrid = [];\n        for (let i = grid.length; i < HEIGHT; i++){\n            let row = [];\n            for (let j = 0; j < WIDTH; j++){\n                row = [ ...row, BACKGROUND_COLOR];\n            }\n            genGrid = [ ...genGrid, row];\n        }\n        return [...genGrid, ...grid];\n    }\n\n    shouldGridDestruct(){\n        let tempGrid = this.grid.map(row => row.map(square => square));\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\n            if (compute.length === WIDTH) tab = [...tab, index];\n            return tab;\n        }, []);\n        return lineToDestruct.length > 0;\n    }\n\n    getTempGrid(){\n        let tempGrid = this.grid.map(row => row.map(square => square));\n        let row = [];\n        for (let j = 0; j < WIDTH; j++){\n            row = [ ...row, BACKGROUND_COLOR];\n        }\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\n            if (compute.length === WIDTH) tab = [...tab, index];\n            return tab;\n        }, []);\n        lineToDestruct.reverse();\n        lineToDestruct.forEach(line => tempGrid[line] = row);\n        return tempGrid;\n    }\n\n    handleRowDestruction(){\n        let tempGrid = this.grid.map(row => row.map(square => square));\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\n            if (compute.length === WIDTH) tab = [...tab, index];\n            return tab;\n        }, []);\n        lineToDestruct.reverse();\n        this.setScore(lineToDestruct.length * lineToDestruct.length);\n        lineToDestruct.forEach(line => tempGrid.splice(line,1));\n        if (tempGrid !== this.grid) this.grid = tempGrid;\n        this.grid = Grid.generateGrid(this.grid).map(row => row.map(square => square));\n        this.deadGrid = this.grid;\n    }\n}\n\nexport default Grid;","import {\n    REFRESH_GRID,\n    REFRESH_NEXT_CELL,\n    REFRESH_SAVED_CELL,\n    GAME_LOST,\n    GAME_STARTED,\n    GAME_PAUSED,\n    GAME_RESTARTED, GAME_SCORE, GAME_LEVEL\n} from \"./types\";\n\nexport const refreshGrid = (grid) => {\n    return {\n        type: REFRESH_GRID,\n        payload: grid\n    }\n};\n\nexport const refreshNextCell= (cell) => {\n    return {\n        type: REFRESH_NEXT_CELL,\n        payload: cell\n    }\n};\n\nexport const refreshSavedCell = (cell) => {\n    return {\n        type: REFRESH_SAVED_CELL,\n        payload: cell\n    }\n};\n\nexport const gameStarted = () => {\n    return {\n        type: GAME_STARTED\n    }\n};\n\nexport const gamePaused = () => {\n    return {\n        type: GAME_PAUSED\n    }\n};\n\nexport const gameLost = () => {\n    return {\n        type: GAME_LOST\n    }\n};\n\nexport const gameRestart = () => {\n    return {\n        type: GAME_RESTARTED\n    }\n};\n\nexport const gameScore = (score) => {\n    return {\n        type: GAME_SCORE,\n        payload: score\n    }\n};\n\nexport const gameLevel = (level) => {\n    return {\n        type: GAME_LEVEL,\n        payload: level\n    }\n};","export const REFRESH_GRID = 'REFRESH_GRID';\n\nexport const REFRESH_NEXT_CELL = 'REFRESH_NEXT_CELL';\n\nexport const REFRESH_SAVED_CELL = 'REFRESH_SAVED_CELL';\n\nexport const GAME_STARTED = 'GAME_STARTED';\n\nexport const GAME_LOST = 'GAME_LOST';\n\nexport const GAME_PAUSED = 'GAME_PAUSED';\n\nexport const GAME_RESTARTED = 'GAME_RESTARTED';\n\nexport const GAME_LEVEL = 'GAME_LEVEL';\n\nexport const GAME_SCORE = 'GAME_SCORE';","import {game} from \"./actions\";\n\nconst buttonId = {\n    a: \"BA\",\n    z: \"BZ\",\n    q: \"BQ\",\n    s: \"BS\",\n    d: \"BD\"\n};\n\nconst keyList = ['a', 'z', 'q', 's', 'd'];\n\n//Sets event listeners\nexport const events = () => {\n    document.onkeypress =  handleKeyPress;\n    document.onkeyup = handleKeyUp;\n};\n\nlet keyPressedId = -1;\nlet lastKeyPressed = null;\nfunction handleKeyPress(e){\n    let key = e.key.toLowerCase();\n    if(key === 'a' || key === 'z' || key === 'q' || key === 's' || key === 'd' ) {\n        if (e.key !== lastKeyPressed) {\n            handleKeyUp();\n        }\n        if (keyPressedId === -1) {\n            let btn = document.getElementById(buttonId[e.key.toLowerCase()]);\n            btn.className += \" active\";\n            lastKeyPressed = key;\n            if(key !== 'a' && key !== 'z' ){\n                game(key);\n                keyPressedId = setInterval(() => game(key), 90);\n            }else {\n                lastKeyPressed = key;\n                game(key);\n                keyPressedId = 0;\n            }\n        }\n    }\n}\nfunction handleKeyUp(e) {\n    if(e)\n        if(keyList.some(key => key === e.key.toLowerCase())){\n            let btn = document.getElementById(buttonId[e.key.toLowerCase()]);\n            btn.classList.remove(\"active\");\n        }\n    if(keyPressedId!==-1) {  //Only stop if exists\n        clearTimeout(keyPressedId);\n        keyPressedId=-1;\n    }\n}\n","import {store} from \"../../index\";\nimport { refreshGrid } from \"../../actions\";\n\nimport {HEIGHT, WIDTH} from \"../../game/settings\";\n\nconst cell = \"black\";\n\nexport const fillGrid = (gameGrid, seq) =>{\n    let tempGrid = gameGrid;\n    let row = HEIGHT-1;\n    let lastAnim = 0;\n    const fillGridAnimation = (timestamp) => {\n        let currentFrame = timestamp;\n        if(row >= 0) {\n            if (currentFrame - lastAnim > 0){\n                lastAnim = currentFrame;\n                for(let i = 0; i < WIDTH; i++){\n                    tempGrid[row][i] = cell;\n                }\n                store.dispatch(refreshGrid(tempGrid));\n                row--;\n                if (row === -1) seq();\n            }\n            requestAnimationFrame(fillGridAnimation);\n        }\n    };\n    requestAnimationFrame(fillGridAnimation);\n};\n","import {store} from \"../../index\";\nimport { refreshGrid } from \"../../actions\";\n\nimport {BACKGROUND_COLOR, HEIGHT, WIDTH} from \"../../game/settings\";\nconst cell = BACKGROUND_COLOR;\n\nexport const emptyGrid = (gameGrid, seq) =>{\n    let tempGrid = gameGrid;\n    let lastAnim = 0;\n    let row = 0;\n    const fillGridAnimation = (timestamp) => {\n        let currentFrame = timestamp;\n        if(row < HEIGHT) {\n            if (currentFrame - lastAnim > 0){\n                lastAnim = currentFrame;\n                for(let i = 0; i < WIDTH; i++){\n                    tempGrid[row][i] = cell;\n                }\n                store.dispatch(refreshGrid(tempGrid));\n                row++;\n                if( row === HEIGHT ) seq();\n            }\n            requestAnimationFrame(fillGridAnimation);\n        }\n        else seq()\n    };\n    requestAnimationFrame(fillGridAnimation);\n};\n","import { anim, setAnim } from \"../index\";\n\nimport {fillGrid} from \"./fillGrid\";\nimport {emptyGrid} from \"./emptyGrid\";\n\nlet sequence = 1;\nexport const incrementSequence = () => {\n    sequence += 1;\n};\n\nexport const fillInFillOut = (gameGrid) =>{\n    if(!anim){\n        let lastAnim = 0;\n        let tempGrid = gameGrid.map(row => row.map(square => square));\n        sequence = 1;\n\n        const fillInFillOutAnim = (timestamp) =>{\n            if(sequence){\n                setAnim(true);\n                if (timestamp - lastAnim > 100){\n                    if(sequence === 1){\n                        fillGrid(tempGrid, incrementSequence);\n                        sequence++;\n                    }\n                    if(sequence === 3){\n                        emptyGrid(tempGrid, incrementSequence);\n                        sequence++;\n                    }\n                }\n                if (sequence > 5) {\n                    setAnim(false);\n                    sequence = 0;\n                }\n                requestAnimationFrame(fillInFillOutAnim);\n            }\n        };\n        requestAnimationFrame(fillInFillOutAnim);\n    }\n};\n","import Grid from \"../game/Grid\";\nimport Cell from \"../game/Cell\";\nimport {blank} from \"../game/cellCollection\";\n\nimport {store} from \"../index\";\nimport {gamePaused, gameRestart, gameStarted, refreshNextCell} from \"../actions\";\n\nimport {game} from \"./actions\";\nimport {events} from \"./keybind\";\nimport {fillInFillOut} from \"./animations/fillInFillOut\";\n\n//Contains all essential variables in an object\nexport const gameState = {\n    gameGrid: null,\n    cell: null,\n    nextCell: null,\n    isSavedCell: null,\n    isStarted: null,\n    isPaused: null\n};\n//Set initial values\nconst setInitValues = () => {\n    gameState.gameGrid = new Grid();\n    gameState.cell = new Cell();\n    gameState.nextCell = new Cell();\n    gameState.savedCell = {cell: blank};\n    gameState.isSavedCell = false;\n    gameState.isStarted = false;\n    gameState.isPaused = false;\n    gameState.gameGrid.addCell();\n};\n\n//Reset the game\nexport const reset = () => {\n    setInitValues();\n    store.dispatch(gameRestart());\n    fillInFillOut(gameState.gameGrid.grid, anim, setAnim);\n};\n\n//Animation variable, set to true if there is an animation running\nexport let anim = false;\nexport const setAnim = (value) =>{\n    anim = value;\n};\n\n//Main game loop, move down current cell based on current level\nlet last = 0;\nconst loop = (timestamp) =>{\n    let dif = gameState.gameGrid.level < 10 ? gameState.gameGrid.level*120 : 1080;\n    if(gameState.cell && !gameState.isPaused && !anim && !gameState.gameGrid.lost){\n        let current = timestamp;\n        if(current - last > 1200 - dif){\n            game('DOWN');\n            last = current;\n        }\n        requestAnimationFrame(loop);\n    }\n};\n//Starts game loop\nexport const setLoop = () =>{\n    requestAnimationFrame(loop);\n};\n\n//Start sequence function, resume if paused\nexport const start = () => {\n    if(!gameState.isStarted){\n        setInitValues();\n        gameState.isStarted = true;\n        store.dispatch(refreshNextCell(gameState.nextCell.cell));\n        store.dispatch(gameStarted());\n        events();\n        requestAnimationFrame(loop);\n    }\n    else if(gameState.isPaused) paused();\n};\n\n//Set game to pause or resume if paused\nexport const paused = () => {\n    if(gameState.isStarted){\n        if(gameState.isPaused){\n            gameState.isPaused = false;\n            requestAnimationFrame(loop);\n            store.dispatch(gameStarted());\n        }\n        else {\n            gameState.isPaused = true;\n            store.dispatch(gamePaused());\n        }\n    }\n};\n","import {fillGrid} from \"./fillGrid\";\nimport {emptyGrid} from \"./emptyGrid\";\nimport {store} from \"../../index\";\nimport {refreshGrid} from \"../../actions\";\nimport {GAME_BLANK, LOOSE} from \"../../game/settings\";\n\nlet sequence = 1;\nconst incrementSequence = () => {\n  sequence += 1;\n};\nexport const lostAnimation = (gameGrid) =>{\n\n    let lastAnim = 0;\n    let tempGrid = gameGrid.map(row => row.map(square => square));\n    sequence = 1;\n\n    let count = 0;\n    let lostAnim = 0;\n    const blinkLoose = (timestamp) => {\n        if (count < 10) {\n            if(timestamp - lostAnim > 250){\n                if(count % 2 !== 0) store.dispatch(refreshGrid(LOOSE));\n                else store.dispatch(refreshGrid(GAME_BLANK));\n                lostAnim = timestamp;\n                count++;\n            }\n            requestAnimationFrame(blinkLoose);\n        }\n    };\n\n    const lostAnimationLoop = (timestamp) =>{\n        if(sequence){\n            if (timestamp - lastAnim > 100){\n                if(sequence === 1){\n                    fillGrid(tempGrid, incrementSequence);\n                    sequence++;\n                }\n                if(sequence === 3){\n                    emptyGrid(tempGrid, incrementSequence);\n                    sequence++;\n                }\n                if(sequence === 5){\n                    requestAnimationFrame(blinkLoose);\n                }\n            }\n            requestAnimationFrame(lostAnimationLoop);\n        }\n    };\n    requestAnimationFrame(lostAnimationLoop);\n};\n","import {store} from \"../../index\";\nimport {gameLevel, gameScore, refreshGrid} from \"../../actions\";\n\nimport { setAnim, setLoop } from \"../index\";\n\nlet count = 0;\nlet lastAnim = 0;\n\nexport const rowDestruction = (tempGrid, gameGrid) =>{\n    const rowDestructionAnimation = (timestamp) => {\n        let currentFrame = timestamp;\n        if(count < 7 && currentFrame - lastAnim >= 100){\n            if(count % 2 !== 0 && count < 6) store.dispatch(refreshGrid(tempGrid));\n            else if (count < 6) store.dispatch(refreshGrid(gameGrid.grid));\n            lastAnim = currentFrame;\n            count++;\n            requestAnimationFrame(rowDestructionAnimation);\n        }else if (count >= 7){\n            gameGrid.handleRowDestruction();\n            store.dispatch(refreshGrid(gameGrid.grid));\n            store.dispatch(gameScore(gameGrid.score));\n            store.dispatch(gameLevel(gameGrid.level));\n            count = 0;\n            setAnim(false);\n            setLoop();\n        }else if (count < 7){\n            requestAnimationFrame(rowDestructionAnimation);\n        }\n    };\n    requestAnimationFrame(rowDestructionAnimation);\n};","import Cell from \"../game/Cell\";\nimport {gameState, anim, setAnim} from \"./index\";\n\nimport {store} from \"../index\";\nimport {\n    gameLost,\n    refreshGrid,\n    refreshNextCell,\n    refreshSavedCell\n} from \"../actions\";\n\nimport {lostAnimation} from \"./animations/lostAnimation\";\nimport {rowDestruction} from \"./animations/rowDestruction\";\n\n//Handles cell move, and controls game state\nexport const game = (move) => {\n    if(gameState.isStarted){\n        if (!gameState.gameGrid.lost && !gameState.isPaused && !gameState.gameGrid.lost && !anim) {\n            if (!gameState.cell.isAlive && !gameState.gameGrid.lost) {\n                gameState.cell = gameState.nextCell;\n                gameState.nextCell = new Cell(gameState.gameGrid.deadGrid);\n                store.dispatch(refreshNextCell(gameState.nextCell.cell));\n            }\n            if (gameState.cell) {\n                switch (move) {\n                    case 'a':\n                        if (gameState.isSavedCell) {\n                            let tempCell = gameState.savedCell;\n                            gameState.savedCell = gameState.cell;\n                            gameState.cell = tempCell;\n                            gameState.savedCell.resetRow();\n                        } else {\n                            gameState.gameGrid.wipeActiveGrid();\n                            gameState.savedCell = gameState.cell;\n                            gameState.savedCell.resetRow();\n                            gameState.cell = gameState.nextCell;\n                            gameState.nextCell = new Cell();\n                            gameState.isSavedCell = true;\n                            store.dispatch(refreshNextCell(gameState.nextCell.cell));\n                        }\n                        store.dispatch(refreshSavedCell(gameState.savedCell.cell));\n                        break;\n                    case 's':\n                    case 'DOWN':\n                        gameState.cell.moveDown(gameState.gameGrid);\n                        break;\n                    case 'd':\n                    case 'RIGHT':\n                        gameState.cell.moveRight(gameState.gameGrid.deadGrid);\n                        break;\n                    case 'q':\n                    case 'LEFT':\n                        gameState.cell.moveLeft(gameState.gameGrid.deadGrid);\n                        break;\n                    case 'z':\n                    case 'ROTATE':\n                        gameState.cell.rotate(gameState.gameGrid.deadGrid);\n                        break;\n                    default:\n                }\n            }\n            if (gameState.gameGrid.lost) {\n                store.dispatch(gameLost());\n                setTimeout(() => lostAnimation(gameState.gameGrid.grid),250);\n            }\n            gameState.gameGrid.renderCelltoGrid(gameState.cell);\n            if (!gameState.cell.isAlive) {\n                if (gameState.gameGrid.shouldGridDestruct()) {\n                    rowDestruction(gameState.gameGrid.getTempGrid(), gameState.gameGrid);\n                    setAnim(true);\n                }\n            }\n            store.dispatch(refreshGrid(gameState.gameGrid.grid));\n        }\n    }\n};\n","import React from 'react'\n\nimport './controls.css';\n\nimport Button from \"./Button\"\n\nimport { game } from \"../../loop/actions\";\nimport { paused, reset, start} from \"../../loop/index\";\n\n\nconst Controls = () => {\n\n    return(\n        <div className=\"controls-box\">\n            <div className=\"controls\">\n                <div className=\"row\">\n                    <span className=\"start-btn\" onClick={() => start()}>START</span>\n                    <span className=\"start-btn\" onClick={() => paused()}>PAUSE</span>\n                    <span className=\"start-btn\" onClick={() => reset()}>RESET</span>\n                </div>\n                <div className=\"row\">\n                    <div className=\"game-btn\">\n                        <Button id=\"BA\" type=\"single\" input=\"a\" action={game}>\n                            A\n                        </Button>\n                        SAVE\n                    </div>\n                    <div className=\"game-btn\">\n                        <Button id=\"BZ\" type=\"single\" input=\"ROTATE\" action={game}>\n                            Z\n                        </Button>\n                        ROTATE\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"game-btn\">\n                        <Button id=\"BQ\" type=\"repeat\" input=\"q\" action={game}>\n                            Q\n                        </Button>\n                        LEFT\n                    </div>\n                    <div className=\"game-btn\">\n                        <Button id=\"BD\" type=\"repeat\" input=\"d\" action={game}>\n                            D\n                        </Button>\n                        RIGHT\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"game-btn\">\n                        <Button id=\"BS\" type=\"repeat\" input=\"s\" action={game}>\n                            S\n                        </Button>\n                        DOWN\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Controls;","import React from 'react';\n\nimport Grid from \"../assets/Grid\";\nimport {connect} from \"react-redux\";\n\nclass CenterGrid extends React.Component{\n\n    render() {\n        const { grid } = this.props;\n        return (\n                <Grid className=\"centeredgame\" grid={grid} id=\"C\"/>\n        )\n    }\n}\n\nconst mapStateToProps = ({grid}) =>{\n   return {\n       grid\n   }\n};\nexport default connect(mapStateToProps)(CenterGrid);","import React from 'react';\n\nimport './layout.css';\n\nimport LeftInfo from \"./LeftInfo\";\nimport RightInfo from \"./RightInfo\";\nimport Controls from \"./Controls/Controls\";\nimport CenterGrid from \"./CenterGrid\";\n\nconst Layout = () => {\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-box\">\n                <div className=\"game-grid\">\n                    <LeftInfo/>\n                    <CenterGrid/>\n                    <RightInfo/>\n                </div>\n                <Controls/>\n            </div>\n        </div>\n    )\n};\n\nexport default Layout;","import { combineReducers } from \"redux\";\n\nimport gridReducer from './gridReducer';\nimport nextCellReducer from './nextCellReducer';\nimport savedCellReducer from './savedCellReducer';\nimport gameStateReducer from \"./gameStateReducer\";\nimport gameLevelReducer from \"./gameLevelReducer\";\nimport gameScoreReducer from \"./gameScoreReducer\";\n\nexport default combineReducers({\n    grid: gridReducer,\n    nextCell: nextCellReducer,\n    savedCell: savedCellReducer,\n    gameState: gameStateReducer,\n    gameLevel: gameLevelReducer,\n    gameScore: gameScoreReducer,\n});","import {GAME_RESTARTED, REFRESH_GRID} from \"../actions/types\";\nimport {GAME_BLANK} from \"../game/settings\";\n\nexport default (state = GAME_BLANK.map(row => row.map( square => square)), action) => {\n    switch (action.type) {\n        case REFRESH_GRID:\n            return action.payload.map(row => row.map( square => square));\n        case GAME_RESTARTED:\n            return GAME_BLANK;\n        default:\n            return state;\n    }\n};\n","import {GAME_RESTARTED, REFRESH_NEXT_CELL} from \"../actions/types\";\nimport {blank} from \"../game/cellCollection\";\n\nexport default (state = blank, action) => {\n    switch (action.type) {\n        case REFRESH_NEXT_CELL:\n            return action.payload.map(row => row.map( square => square));\n        case GAME_RESTARTED:\n            return blank;\n        default:\n            return state;\n    }\n};\n","import {GAME_RESTARTED, REFRESH_SAVED_CELL} from \"../actions/types\";\nimport {blank} from \"../game/cellCollection\";\n\nexport default (state = blank, action) => {\n    switch (action.type) {\n        case REFRESH_SAVED_CELL:\n            return action.payload.map(row => row.map( square => square));\n        case GAME_RESTARTED:\n            return blank;\n        default:\n            return state;\n    }\n};\n","import {GAME_LOST, GAME_STARTED, GAME_PAUSED, GAME_RESTARTED} from \"../actions/types\";\n\nexport default (state = '', action) => {\n    switch (action.type) {\n        case GAME_STARTED:\n            return 'Jeu en cours...';\n        case GAME_PAUSED:\n            return 'En pause.';\n        case GAME_LOST:\n            return 'Perdu !';\n        case GAME_RESTARTED:\n            return '';\n        default:\n            return state;\n    }\n};\n","import {GAME_LEVEL, GAME_RESTARTED} from \"../actions/types\";\n\nexport default (state = 1, action) => {\n    switch (action.type) {\n        case GAME_LEVEL:\n            return action.payload;\n        case GAME_RESTARTED:\n            return 1;\n        default:\n            return state;\n    }\n};\n","import {GAME_RESTARTED, GAME_SCORE} from \"../actions/types\";\n\nexport default (state = 0, action) => {\n    switch (action.type) {\n        case GAME_SCORE:\n            return action.payload;\n        case GAME_RESTARTED:\n            return 0;\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport './index.css';\n\nimport Layout from './components/Layout';\nimport reducers from './reducers';\n\nexport const store = createStore(reducers);\n\nReactDom.render(\n    <Provider store={store}>\n        <Layout />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}