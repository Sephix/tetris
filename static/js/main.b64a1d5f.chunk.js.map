{"version":3,"sources":["assets/Grid.js","components/LeftInfo.js","components/RightInfo.js","components/Controls/Button.js","game/settings.js","game/Grid.js","game/cellCollection.js","game/Cell.js","actions/index.js","actions/types.js","loop/index.js","components/Controls/Controls.js","components/CenterGrid.js","components/Layout.js","reducers/index.js","reducers/gridReducer.js","reducers/nextCellReducer.js","reducers/savedCellReducer.js","reducers/gameStateReducer.js","reducers/gameLevelReducer.js","reducers/gameScoreReducer.js","index.js"],"names":["Grid","_ref","grid","id","className","react_default","a","createElement","map","r","i","key","concat","c","ci","LeftInfo","_this$props","this","props","savedCell","nextCell","assets_Grid","React","Component","connect","RightInfo","gameState","gameLevel","gameScore","mousedownID","inputType","Button","children","type","input","action","mouseUp","event","clearInterval","handleButtonPress","e","document","addEventListener","setInterval","onTouchStart","onMouseDown","WIDTH","ONE","TWO","FOUR","SIX","GAME_BLANK","Object","classCallCheck","livingCell","intScore","score","previousScore","level","generateGrid","deadGrid","lost","n","Cell","cell","cellHeight","cellWidth","rowPos","colPos","isAlive","tempGrid","nbRow","j","row","square","lineToDestruct","reduce","tab","index","filter","length","toConsumableArray","reverse","setScore","forEach","line","splice","genGrid","blank","one","two","three","four","five","six","seven","arguments","undefined","randomCellSelection","findCellSize","Math","floor","random","willCollide","prevCol","setLost","prevRow","newCell","tempCell","sq","currentCell","col","HEIGHT","k","l","previousCell","Cells","refreshNextCell","payload","gameGrid","isSavedCell","isStarted","isPaused","addCell","keyPressedId","lastKeyPressed","handleKeyPress","handleKeyUp","game","clearTimeout","last","loop","timestamp","dif","current","requestAnimationFrame","start","paused","store","dispatch","onkeypress","onkeyup","move","resetRow","wipeActiveGrid","moveDown","moveRight","moveLeft","rotate","renderCelltoGrid","handleRowDestruction","Controls","onClick","Controls_Button","CenterGrid","Layout","components_LeftInfo","components_CenterGrid","components_RightInfo","components_Controls_Controls","combineReducers","state","__webpack_require__","d","__webpack_exports__","createStore","reducers","ReactDom","render","es","components_Layout","querySelector"],"mappings":"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","file":"static/js/main.b64a1d5f.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst Grid = ({grid, id, className}) => {\r\n    return(\r\n        <div className={className}>\r\n            {grid.map((r,i) => <p className=\"grid\" key={`${id}r${i}`}>{ r.map( (c, ci) => <b className={c} key={`${id}${i}${ci}`}/>)}</p> )}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Grid;","import React from 'react';\r\nimport Grid from \"../assets/Grid\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass LeftInfo extends React.Component{\r\n\r\n    render() {\r\n        const { savedCell, nextCell } = this.props;\r\n        return(\r\n            <div className=\"left-info\">\r\n                <div className=\"next-cell\">\r\n                    <Grid grid={nextCell} id=\"R\"/>\r\n                    <p>Next</p>\r\n                </div>\r\n                <div className=\"save-cell\">\r\n                    <p>Saved</p>\r\n                    <Grid grid={savedCell} id=\"G\"/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({savedCell, nextCell}) =>{\r\n    return {\r\n        savedCell,\r\n        nextCell\r\n    }\r\n};\r\nexport default connect(mapStateToProps)(LeftInfo);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nclass RightInfo extends React.Component{\r\n\r\n    render() {\r\n        const { gameState, gameLevel, gameScore } = this.props;\r\n        return(\r\n            <div className=\"right-info\">\r\n                <div>\r\n                    {gameState === '' ? 'Appuyer sur Start' : gameState}\r\n                </div>\r\n                <div>\r\n                    Level: {gameLevel}\r\n                </div>\r\n                <div>\r\n                    Score: {gameScore}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = ({ gameState, gameLevel, gameScore }) =>{\r\n    return {\r\n        gameState,\r\n        gameLevel,\r\n        gameScore\r\n    }\r\n};\r\nexport default connect(mapStateToProps)(RightInfo);","import React from 'react';\r\n\r\n//Gobal states\r\nlet mousedownID = -1;\r\nlet listeners = false;\r\nlet inputType = null;\r\n\r\nconst Button = ({children, type, input, action}) => {\r\n\r\n    const mouseUp = (event) => {\r\n        if(mousedownID!==-1) {  //Only stop if exists\r\n            clearInterval(mousedownID);\r\n            mousedownID=-1;\r\n        }\r\n    };\r\n\r\n    const handleButtonPress = (e, input) =>{\r\n        if(inputType === null ) inputType = e.type;\r\n        if(type === \"single\"){\r\n            if (e.type === inputType) action(input);\r\n        }\r\n        else if(type === \"repeat\"){\r\n            if(!listeners){\r\n                document.addEventListener(\"mouseup\", mouseUp);\r\n                document.addEventListener(\"mouseout\", mouseUp);\r\n                document.addEventListener(\"touchleave\", mouseUp);\r\n                document.addEventListener(\"touchcancel\", mouseUp);\r\n                document.addEventListener(\"touchend\", mouseUp);\r\n            }\r\n            if (e.type === inputType) action(input);\r\n            if(mousedownID===-1)  //Prevent multiple loops!\r\n                mousedownID = setInterval(() => action(input), 100);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <span className=\"video-game-button\" onTouchStart={(e) => handleButtonPress(e, input)} onMouseDown={(e) => handleButtonPress(e, input)}>\r\n            {children}\r\n        </span>\r\n    )\r\n};\r\n\r\nexport default Button;","//Game Settings\r\nexport const HEIGHT = 20;\r\nexport const WIDTH = 10;\r\n\r\n//Color Settings;\r\nexport const BACKGROUND_COLOR = \"white\";\r\n\r\n//Cell colors\r\nexport const ONE = \"green\";\r\nexport const TWO = \"blue\";\r\nexport const THREE = \"orange\";\r\nexport const FOUR = \"purple\";\r\nexport const FIVE = \"cyan\";\r\nexport const SIX = \"yellow\";\r\nexport const SEVEN = \"red\";\r\n\r\n//Blank Grid\r\nexport const GAME_BLANK = ([\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n]);","import {HEIGHT, WIDTH, BACKGROUND_COLOR} from \"./settings\";\r\n\r\nclass Grid {\r\n    livingCell = false;\r\n    intScore = 0;\r\n    score = 0;\r\n    previousScore = 0;\r\n    level = 1;\r\n    constructor(){\r\n        this.grid = Grid.generateGrid([]);\r\n        this.deadGrid = Grid.generateGrid([]);\r\n        this.lost = false;\r\n    }\r\n\r\n    setScore(n){\r\n        this.score += n * this.level;\r\n        this.intScore += n;\r\n        if (this.intScore > this.previousScore + 50){\r\n            this.level++;\r\n            this.previousScore += 50 + (this.intScore - (this.previousScore+50));\r\n        }\r\n    }\r\n\r\n    setLost(){\r\n        this.lost = true;\r\n    }\r\n\r\n    wipeActiveGrid(){\r\n        this.grid = this.deadGrid.map(r => r.map(c => c));\r\n    }\r\n\r\n    renderCelltoGrid(Cell){\r\n        if(this.livingCell && !this.lost){\r\n            let { cell, cellHeight, cellWidth, rowPos, colPos, isAlive} = Cell;\r\n            if (isAlive){\r\n                let tempGrid = this.deadGrid.map(r => r.map(c => c));\r\n                let nbRow = (cellHeight-1 > rowPos) ? rowPos+1 : cellHeight;\r\n                for (let i = 0; i < nbRow; i++){\r\n                    for (let j = colPos; j < colPos + cellWidth; j++){\r\n                        if(cell[cellHeight-1 - i][j - colPos] !== BACKGROUND_COLOR){\r\n                            tempGrid[rowPos-i][j] = cell[cellHeight-1 - i][j - colPos];\r\n                        }\r\n                    }\r\n                }\r\n                this.grid = tempGrid;\r\n            }\r\n            else if (!isAlive) {\r\n                this.deadGrid = this.grid.map(r => r.map(c => c));\r\n            }\r\n        }\r\n    }\r\n\r\n    addCell(){\r\n        if(!this.livingCell && !this.lost){\r\n            this.livingCell = true;\r\n        }\r\n    }\r\n\r\n    static generateGrid(grid){\r\n        let genGrid = [];\r\n        for (let i = grid.length; i < HEIGHT; i++){\r\n            let row = [];\r\n            for (let j = 0; j < WIDTH; j++){\r\n                row = [ ...row, BACKGROUND_COLOR];\r\n            }\r\n            genGrid = [ ...genGrid, row];\r\n        }\r\n        return [...genGrid, ...grid];\r\n    }\r\n\r\n    handleRowDestruction(){\r\n        let tempGrid = this.grid.map(row => row.map(square => square));\r\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\r\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\r\n            if (compute.length === WIDTH) tab = [...tab, index];\r\n            return tab;\r\n        }, []);\r\n        lineToDestruct.reverse();\r\n        this.setScore(lineToDestruct.length * lineToDestruct.length);\r\n        lineToDestruct.forEach(line => tempGrid.splice(line,1));\r\n        if (tempGrid !== this.grid) this.grid = tempGrid;\r\n        this.grid = Grid.generateGrid(this.grid).map(row => row.map(square => square));\r\n        this.deadGrid = this.grid;\r\n    }\r\n}\r\n\r\nexport default Grid;","import {BACKGROUND_COLOR, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN} from \"./settings\";\r\n\r\nexport const blank = ([\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n]);\r\n\r\nexport const one = ([\r\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const two = ([\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const three = (\r\n    [[BACKGROUND_COLOR, THREE, THREE, BACKGROUND_COLOR],\r\n    [THREE, THREE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]]\r\n);\r\n\r\nexport const four = ([\r\n    [FOUR, FOUR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, FOUR, FOUR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const five = ([\r\n    [BACKGROUND_COLOR, FIVE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [FIVE, FIVE, FIVE, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const six = ([\r\n    [SIX, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [SIX, SIX, SIX, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const seven = ([\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, SEVEN, BACKGROUND_COLOR],\r\n    [SEVEN, SEVEN, SEVEN, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);","import {BACKGROUND_COLOR, WIDTH, HEIGHT} from \"./settings\";\r\n\r\nimport * as Cells from \"./cellCollection\";\r\n\r\nclass Cell{\r\n    static previousCell = null;\r\n\r\n    cell = null;\r\n    isAlive = true;\r\n\r\n    cellHeight = 0;\r\n    cellWidth = 0;\r\n    rowPos = -1;\r\n\r\n    constructor (deadGrid = null){\r\n        this.randomCellSelection();\r\n        this.findCellSize();\r\n        this.colPos = Math.floor(Math.random() * (WIDTH - this.cellWidth+1));\r\n        if (deadGrid && this.willCollide(deadGrid, this.rowPos+1,this.colPos)) this.cell = null;\r\n    }\r\n\r\n    moveLeft(deadGrid){\r\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos-1)){\r\n            this.prevCol = this.colPos;\r\n            this.colPos--;\r\n        }\r\n    }\r\n\r\n    moveRight(deadGrid){\r\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos+1)){\r\n            this.prevCol = this.colPos;\r\n            this.colPos++;\r\n        }\r\n    }\r\n\r\n    moveDown(grid){\r\n        if (this.willCollide(grid.deadGrid, this.rowPos+1, this.colPos)) {\r\n            this.isAlive = false;\r\n            if(this.rowPos < this.cellHeight-1) grid.setLost();\r\n        }\r\n        else {\r\n            this.prevRow = this.rowPos;\r\n            this.rowPos += 1;\r\n        }\r\n    }\r\n\r\n    rotate(deadGrid){\r\n        let newCell = [\r\n            [\"white\", \"white\", \"white\", \"white\"],\r\n            [\"white\", \"white\", \"white\", \"white\"],\r\n            [\"white\", \"white\", \"white\", \"white\"],\r\n            [\"white\", \"white\", \"white\", \"white\"]\r\n        ];\r\n        let tempCell = this.cell.map(r => r.map(sq => sq));\r\n\r\n        for(let i = this.cellHeight; i > 0; i--){\r\n            for(let j = this.cellWidth; j > 0; j--){\r\n                newCell[this.cellWidth- j][this.cellHeight - i] = tempCell[i-1][this.cellWidth - j];\r\n            }\r\n        }\r\n        let currentCell = this.cell.map(r => r.map(sq => sq));\r\n        this.cell = newCell.map(r => r.map(sq => sq));\r\n        this.findCellSize();\r\n        if(this.willCollide(deadGrid, this.rowPos, this.colPos)){\r\n            this.cell = currentCell.map(r => r.map(sq => sq));\r\n            this.findCellSize();\r\n        }\r\n    }\r\n\r\n    willCollide(deadGrid, row, col){\r\n        if (WIDTH - this.cellWidth < col || col < 0 || row > HEIGHT-1)\r\n            return true;\r\n        let nbRow = (this.cellHeight-1 > row) ? row : this.cellHeight;\r\n        for (let i = 0; i < nbRow; i++){\r\n            for (let j = 0; j < this.cellWidth; j++){\r\n                if(deadGrid[row - i][col + j] !== BACKGROUND_COLOR &&\r\n                    this.cell[this.cellHeight-1 - i][j] !== BACKGROUND_COLOR){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    findCellSize (){\r\n        //Cell Height\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                if (this.cell[i][j] !== BACKGROUND_COLOR) {\r\n                    this.cellHeight = i+1;\r\n                }\r\n            }\r\n        }\r\n        //Cell Width\r\n        for (let k = 0; k < 4; k++) {\r\n            for (let l = 0; l < 4; l++) {\r\n                if (this.cell[l][k] !== BACKGROUND_COLOR) {\r\n                    this.cellWidth = k+1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetRow(){\r\n        this.rowPos = -1;\r\n    }\r\n    randomCellSelection (){\r\n        let random = null;\r\n        do {\r\n            random = Math.floor(Math.random() * Math.floor(7));\r\n        } while (random === Cell.previousCell);\r\n        Cell.previousCell = random;\r\n        switch (random) {\r\n            case 0:\r\n                this.cell = Cells.one;\r\n                break;\r\n            case 1:\r\n                this.cell = Cells.two;\r\n                break;\r\n            case 2:\r\n                this.cell = Cells.three;\r\n                break;\r\n            case 3:\r\n                this.cell = Cells.four;\r\n                break;\r\n            case 4:\r\n                this.cell = Cells.five;\r\n                break;\r\n            case 5:\r\n                this.cell = Cells.six;\r\n                break;\r\n            case 6:\r\n                this.cell = Cells.seven;\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n}\r\n\r\nexport default Cell;","import {\r\n    REFRESH_GRID,\r\n    REFRESH_NEXT_CELL,\r\n    REFRESH_SAVED_CELL,\r\n    GAME_LOST,\r\n    GAME_STARTED,\r\n    GAME_PAUSED,\r\n    GAME_RESTARTED, GAME_SCORE, GAME_LEVEL\r\n} from \"./types\";\r\n\r\nexport const refreshGrid = (grid) => {\r\n    return {\r\n        type: REFRESH_GRID,\r\n        payload: grid\r\n    }\r\n};\r\n\r\nexport const refreshNextCell= (cell) => {\r\n    return {\r\n        type: REFRESH_NEXT_CELL,\r\n        payload: cell\r\n    }\r\n};\r\n\r\nexport const refreshSavedCell = (cell) => {\r\n    return {\r\n        type: REFRESH_SAVED_CELL,\r\n        payload: cell\r\n    }\r\n};\r\n\r\nexport const gameStarted = () => {\r\n    return {\r\n        type: GAME_STARTED\r\n    }\r\n};\r\n\r\nexport const gamePaused = () => {\r\n    return {\r\n        type: GAME_PAUSED\r\n    }\r\n};\r\n\r\nexport const gameLost = () => {\r\n    return {\r\n        type: GAME_LOST\r\n    }\r\n};\r\n\r\nexport const gameRestart = () => {\r\n    return {\r\n        type: GAME_RESTARTED\r\n    }\r\n};\r\n\r\nexport const gameScore = (score) => {\r\n    return {\r\n        type: GAME_SCORE,\r\n        payload: score\r\n    }\r\n};\r\n\r\nexport const gameLevel = (level) => {\r\n    return {\r\n        type: GAME_LEVEL,\r\n        payload: level\r\n    }\r\n};","export const REFRESH_GRID = 'REFRESH_GRID';\r\n\r\nexport const REFRESH_NEXT_CELL = 'REFRESH_NEXT_CELL';\r\n\r\nexport const REFRESH_SAVED_CELL = 'REFRESH_SAVED_CELL';\r\n\r\nexport const GAME_STARTED = 'GAME_STARTED';\r\n\r\nexport const GAME_LOST = 'GAME_LOST';\r\n\r\nexport const GAME_PAUSED = 'GAME_PAUSED';\r\n\r\nexport const GAME_RESTARTED = 'GAME_RESTARTED';\r\n\r\nexport const GAME_LEVEL = 'GAME_LEVEL';\r\n\r\nexport const GAME_SCORE = 'GAME_SCORE';","import Grid from '../game/Grid';\r\nimport Cell from \"../game/Cell\";\r\nimport {blank} from \"./../game/cellCollection\";\r\n\r\nimport {\r\n    refreshGrid,\r\n    refreshNextCell,\r\n    refreshSavedCell,\r\n    gameStarted,\r\n    gameLost,\r\n    gamePaused,\r\n    gameRestart,\r\n    gameScore,\r\n    gameLevel\r\n} from \"../actions\";\r\nimport { store } from \"../index\";\r\n\r\n\r\nlet gameGrid = new Grid();\r\nlet cell = new Cell();\r\nlet nextCell = new Cell();\r\nlet savedCell = {cell: blank};\r\nlet isSavedCell = false;\r\nlet isStarted = false;\r\nlet isPaused = false;\r\ngameGrid.addCell();\r\n\r\nlet keyPressedId = -1;\r\nlet lastKeyPressed = null;\r\nfunction handleKeyPress(e){\r\n    if(e.key === 'a' || e.key === 'z' || e.key === 'q' || e.key === 's' || e.key === 'd' ) {\r\n        if (e.key !== lastKeyPressed) {\r\n            handleKeyUp();\r\n        }\r\n        if (keyPressedId === -1) {\r\n            lastKeyPressed = e.key;\r\n            if(e.key !== 'a' && e.key !== 'z' ){\r\n                game(e.key);\r\n                keyPressedId = setInterval(() => game(e.key), 90);\r\n            }else {\r\n                lastKeyPressed = e.key;\r\n                game(e.key);\r\n                keyPressedId = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction handleKeyUp() {\r\n    if(keyPressedId!==-1) {  //Only stop if exists\r\n        clearTimeout(keyPressedId);\r\n        keyPressedId=-1;\r\n    }\r\n}\r\nconst events = () => {\r\n    document.onkeypress = handleKeyPress;\r\n    document.onkeyup = handleKeyUp;\r\n};\r\n\r\n\r\nlet last = 0;\r\nconst loop = (timestamp) =>{\r\n    let dif = gameGrid.level < 10 ? gameGrid.level*120 : 100;\r\n    if(cell && !isPaused){\r\n        let current = timestamp;\r\n        if(current - last > 1200 - dif){\r\n            game('DOWN');\r\n            last = current;\r\n        }\r\n        requestAnimationFrame(loop);\r\n    }\r\n};\r\n\r\nexport const start = () => {\r\n    if(!isStarted){\r\n        isStarted = true;\r\n        store.dispatch(refreshNextCell(nextCell.cell));\r\n        store.dispatch(gameStarted());\r\n        events();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    else if(isPaused) paused();\r\n};\r\n\r\nexport const paused = () => {\r\n    if(isStarted){\r\n        if(isPaused){\r\n            isPaused = false;\r\n            requestAnimationFrame(loop);\r\n            store.dispatch(gameStarted());\r\n        }\r\n        else {\r\n            isPaused = true;\r\n            store.dispatch(gamePaused());\r\n        }\r\n    }\r\n};\r\n\r\nexport const reset = () => {\r\n    gameGrid = new Grid();\r\n    cell = new Cell();\r\n    nextCell = new Cell();\r\n    savedCell = {cell: blank};\r\n    isSavedCell = false;\r\n    isStarted = false;\r\n    isPaused = false;\r\n    gameGrid.addCell();\r\n\r\n    store.dispatch(gameRestart());\r\n};\r\n\r\nconst game = (move) => {\r\n    if (!cell.isAlive) {\r\n        cell = nextCell;\r\n        nextCell = new Cell(gameGrid.deadGrid);\r\n        store.dispatch(refreshNextCell(nextCell.cell));\r\n    }\r\n    if (cell && isStarted && !isPaused && !gameGrid.lost) {\r\n        switch (move) {\r\n            case 'a':\r\n                if (isSavedCell) {\r\n                    let tempCell = savedCell;\r\n                    savedCell = cell;\r\n                    cell = tempCell;\r\n                    savedCell.resetRow();\r\n                } else {\r\n                    gameGrid.wipeActiveGrid();\r\n                    savedCell = cell;\r\n                    savedCell.resetRow();\r\n                    cell = nextCell;\r\n                    nextCell = new Cell();\r\n                    isSavedCell = true;\r\n                    store.dispatch(refreshNextCell(nextCell.cell));\r\n                }\r\n                store.dispatch(refreshSavedCell(savedCell.cell));\r\n                break;\r\n            case 's':\r\n            case 'DOWN':\r\n                cell.moveDown(gameGrid);\r\n                break;\r\n            case 'd':\r\n            case 'RIGHT':\r\n                cell.moveRight(gameGrid.deadGrid);\r\n                break;\r\n            case 'q':\r\n            case 'LEFT':\r\n                cell.moveLeft(gameGrid.deadGrid);\r\n                break;\r\n            case 'z':\r\n            case 'ROTATE':\r\n                cell.rotate(gameGrid.deadGrid);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n    gameGrid.renderCelltoGrid(cell);\r\n    if (!cell.isAlive) {\r\n        gameGrid.handleRowDestruction();\r\n        store.dispatch(gameScore(gameGrid.score));\r\n        store.dispatch(gameLevel(gameGrid.level));\r\n    }\r\n    store.dispatch(refreshGrid(gameGrid.grid));\r\n    if(gameGrid.lost) store.dispatch(gameLost());\r\n};\r\n\r\nexport default game;\r\n","import React from 'react'\r\n\r\nimport Button from \"./Button\"\r\n\r\nimport game, {paused, reset, start} from \"../../loop/index\";\r\n\r\n\r\nconst Controls = () => {\r\n\r\n    return(\r\n        <div className=\"controls-box\">\r\n            <div className=\"controls\">\r\n                <div className=\"row\">\r\n                    <span className=\"start-btn\" onClick={() => start()}>START</span>\r\n                    <span className=\"start-btn\" onClick={() => paused()}>PAUSE</span>\r\n                    <span className=\"start-btn\" onClick={() => reset()}>RESET</span>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"game-btn\">\r\n                        <Button type=\"single\" input=\"a\" action={game}>\r\n                            A\r\n                        </Button>\r\n                        SAVE\r\n                    </div>\r\n                    <div className=\"game-btn\">\r\n                        <Button type=\"single\" input=\"ROTATE\" action={game}>\r\n                            Z\r\n                        </Button>\r\n                        ROTATE\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"game-btn\">\r\n                        <Button type=\"repeat\" input=\"q\" action={game}>\r\n                            Q\r\n                        </Button>\r\n                        LEFT\r\n                    </div>\r\n                    <div className=\"game-btn\">\r\n                        <Button type=\"repeat\" input=\"d\" action={game}>\r\n                            D\r\n                        </Button>\r\n                        RIGHT\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"game-btn\">\r\n                        <Button type=\"repeat\" input=\"s\" action={game}>\r\n\r\n                            S\r\n                        </Button>\r\n                        DOWN\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Controls;","import React from 'react';\r\nimport Grid from \"../assets/Grid\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass CenterGrid extends React.Component{\r\n\r\n    render() {\r\n        const { grid } = this.props;\r\n        return (\r\n                <Grid className=\"centeredgame\" grid={grid} id=\"C\"/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({grid}) =>{\r\n   return {\r\n       grid\r\n   }\r\n};\r\nexport default connect(mapStateToProps)(CenterGrid);","import React from 'react';\r\nimport LeftInfo from \"./LeftInfo\";\r\nimport RightInfo from \"./RightInfo\";\r\nimport Controls from \"./Controls/Controls\";\r\nimport CenterGrid from \"./CenterGrid\";\r\n\r\nconst Layout = () => {\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-box\">\r\n                <div className=\"game-grid\">\r\n                    <LeftInfo/>\r\n                    <CenterGrid/>\r\n                    <RightInfo/>\r\n                </div>\r\n                <Controls/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Layout;","import { combineReducers } from \"redux\";\r\n\r\nimport gridReducer from './gridReducer';\r\nimport nextCellReducer from './nextCellReducer';\r\nimport savedCellReducer from './savedCellReducer';\r\nimport gameStateReducer from \"./gameStateReducer\";\r\nimport gameLevelReducer from \"./gameLevelReducer\";\r\nimport gameScoreReducer from \"./gameScoreReducer\";\r\n\r\nexport default combineReducers({\r\n    grid: gridReducer,\r\n    nextCell: nextCellReducer,\r\n    savedCell: savedCellReducer,\r\n    gameState: gameStateReducer,\r\n    gameLevel: gameLevelReducer,\r\n    gameScore: gameScoreReducer,\r\n});","import {GAME_RESTARTED, REFRESH_GRID} from \"../actions/types\";\r\nimport {GAME_BLANK} from \"../game/settings\";\r\n\r\nexport default (state = GAME_BLANK, action) => {\r\n    switch (action.type) {\r\n        case REFRESH_GRID:\r\n            return action.payload.map(row => row.map( square => square));\r\n        case GAME_RESTARTED:\r\n            return GAME_BLANK;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {GAME_RESTARTED, REFRESH_NEXT_CELL} from \"../actions/types\";\r\nimport {blank} from \"../game/cellCollection\";\r\n\r\nexport default (state = blank, action) => {\r\n    switch (action.type) {\r\n        case REFRESH_NEXT_CELL:\r\n            return action.payload.map(row => row.map( square => square));\r\n        case GAME_RESTARTED:\r\n            return blank;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {GAME_RESTARTED, REFRESH_SAVED_CELL} from \"../actions/types\";\r\nimport {blank} from \"../game/cellCollection\";\r\n\r\nexport default (state = blank, action) => {\r\n    switch (action.type) {\r\n        case REFRESH_SAVED_CELL:\r\n            return action.payload.map(row => row.map( square => square));\r\n        case GAME_RESTARTED:\r\n            return blank;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {GAME_LOST, GAME_STARTED, GAME_PAUSED, GAME_RESTARTED} from \"../actions/types\";\r\n\r\nexport default (state = '', action) => {\r\n    switch (action.type) {\r\n        case GAME_STARTED:\r\n            return 'Jeu en cours...';\r\n        case GAME_PAUSED:\r\n            return 'En pause.';\r\n        case GAME_LOST:\r\n            return 'Perdu !';\r\n        case GAME_RESTARTED:\r\n            return '';\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {GAME_LEVEL} from \"../actions/types\";\r\n\r\nexport default (state = 1, action) => {\r\n    switch (action.type) {\r\n        case GAME_LEVEL:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {GAME_SCORE} from \"../actions/types\";\r\n\r\nexport default (state = 0, action) => {\r\n    switch (action.type) {\r\n        case GAME_SCORE:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport './index.css';\r\n\r\nimport Layout from './components/Layout';\r\nimport reducers from './reducers';\r\n\r\nexport const store = createStore(reducers);\r\n\r\nReactDom.render(\r\n    <Provider store={store}>\r\n        <Layout />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}