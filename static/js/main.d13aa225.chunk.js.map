{"version":3,"sources":["assets/Grid.js","components/LeftInfo.js","components/RightInfo.js","components/Controls/Button.js","game/settings.js","game/cellCollection.js","game/Cell.js","game/Grid.js","actions/index.js","actions/types.js","loop/keybind.js","loop/animations/fillGrid.js","loop/animations/emptyGrid.js","loop/animations/fillInFillOut.js","loop/index.js","loop/animations/lostAnimation.js","loop/animations/rowDestruction.js","loop/actions.js","components/Controls/Controls.js","components/CenterGrid.js","components/Layout.js","reducers/index.js","reducers/gridReducer.js","reducers/nextCellReducer.js","reducers/savedCellReducer.js","reducers/gameStateReducer.js","reducers/gameLevelReducer.js","reducers/gameScoreReducer.js","index.js"],"names":["Grid","_ref","grid","id","_ref$className","className","react_default","a","createElement","concat","map","r","i","key","c","ci","LeftInfo","_this$props","this","props","savedCell","nextCell","assets_Grid","React","Component","connect","RightInfo","gameState","gameLevel","gameScore","mousedownID","inputType","Button","children","type","input","action","mouseUp","event","clearInterval","handleButtonPress","e","document","addEventListener","setInterval","onTouchStart","onMouseDown","WIDTH","ONE","TWO","FOUR","SIX","BLACK","GAME_BLANK","LOOSE","blank","one","two","three","four","five","six","seven","Cell","Object","classCallCheck","cell","isAlive","cellHeight","cellWidth","rowPos","randomCellSelection","findCellSize","colPos","Math","floor","random","deadGrid","willCollide","prevCol","setLost","prevRow","newCell","Cells","sq","tempCell","j","currentCell","row","col","HEIGHT","nbRow","k","l","previousCell","livingCell","intScore","score","previousScore","level","generateGrid","lost","n","tempGrid","square","reduce","tab","index","filter","length","toConsumableArray","lineToDestruct","reverse","forEach","line","setScore","splice","genGrid","refreshGrid","payload","refreshNextCell","buttonId","z","q","s","d","keyList","keyPressedId","lastKeyPressed","handleKeyPress","toLowerCase","handleKeyUp","getElementById","game","some","classList","remove","clearTimeout","fillGrid","gameGrid","seq","lastAnim","requestAnimationFrame","fillGridAnimation","timestamp","store","dispatch","emptyGrid","sequence","incrementSequence","isSavedCell","isStarted","isPaused","setInitValues","addCell","reset","anim","fillInFillOutAnim","setAnim","fillInFillOut","value","last","loop","dif","current","start","paused","onkeypress","onkeyup","count","rowDestruction","rowDestructionAnimation","currentFrame","handleRowDestruction","move","resetRow","wipeActiveGrid","moveDown","moveRight","moveLeft","rotate","setTimeout","lostAnim","blinkLoose","lostAnimationLoop","lostAnimation","renderCelltoGrid","shouldGridDestruct","getTempGrid","Controls","onClick","Controls_Button","CenterGrid","Layout","components_LeftInfo","components_CenterGrid","components_RightInfo","components_Controls_Controls","combineReducers","state","arguments","undefined","__webpack_require__","__webpack_exports__","createStore","reducers","ReactDom","render","es","components_Layout","querySelector"],"mappings":"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","file":"static/js/main.d13aa225.chunk.js","sourcesContent":["import React  from 'react';\n\nimport './grid.css';\n\nconst Grid = ({grid, id, className = \"default\"}) => {\n    return(\n        <div className={`${className} grid`}>\n            {grid.map((r,i) => <p className=\"grid-row\" key={`${id}r${i}`}>{ r.map( (c, ci) => <b className={c} key={`${id}${i}${ci}`}/>)}</p> )}\n        </div>\n    )\n};\n\nexport default Grid;","import React from 'react';\nimport Grid from \"../assets/Grid\";\nimport {connect} from \"react-redux\";\n\nclass LeftInfo extends React.Component{\n\n    render() {\n        const { savedCell, nextCell } = this.props;\n        return(\n            <div className=\"left-info\">\n                <div className=\"next-cell\">\n                    <Grid grid={nextCell} id=\"R\"/>\n                    <p>Next</p>\n                </div>\n                <div className=\"save-cell\">\n                    <p>Saved</p>\n                    <Grid grid={savedCell} id=\"G\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({savedCell, nextCell}) =>{\n    return {\n        savedCell,\n        nextCell\n    }\n};\nexport default connect(mapStateToProps)(LeftInfo);","import React from 'react';\nimport { connect } from \"react-redux\";\n\nclass RightInfo extends React.Component{\n\n    render() {\n        const { gameState, gameLevel, gameScore } = this.props;\n        return(\n            <div className=\"right-info\">\n                <div>\n                    {gameState === '' ? 'Appuyer sur Start' : gameState}\n                </div>\n                <div>\n                    Level: {gameLevel}\n                </div>\n                <div>\n                    Score: {gameScore}\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = ({ gameState, gameLevel, gameScore }) =>{\n    return {\n        gameState,\n        gameLevel,\n        gameScore\n    }\n};\nexport default connect(mapStateToProps)(RightInfo);","import React from 'react';\n\n//Gobal states\nlet mousedownID = -1;\nlet listeners = false;\nlet inputType = null;\n\nconst Button = ({children, type, input, action, id}) => {\n\n    const mouseUp = (event) => {\n        if(mousedownID!==-1) {  //Only stop if exists\n            clearInterval(mousedownID);\n            mousedownID=-1;\n        }\n    };\n\n    const handleButtonPress = (e, input) =>{\n        if(inputType === null ) inputType = e.type;\n        if(type === \"single\"){\n            if (e.type === inputType) action(input);\n        }\n        else if(type === \"repeat\"){\n            if(!listeners){\n                document.addEventListener(\"mouseup\", mouseUp);\n                document.addEventListener(\"mouseout\", mouseUp);\n                document.addEventListener(\"touchleave\", mouseUp);\n                document.addEventListener(\"touchcancel\", mouseUp);\n                document.addEventListener(\"touchend\", mouseUp);\n            }\n            if (e.type === inputType) action(input);\n            if(mousedownID===-1)  //Prevent multiple loops!\n                mousedownID = setInterval(() => action(input), 100);\n        }\n    };\n\n    return(\n        <span id={id} className=\"video-game-button\" onTouchStart={(e) => handleButtonPress(e, input)} onMouseDown={(e) => handleButtonPress(e, input)}>\n            {children}\n        </span>\n    )\n};\n\nexport default Button;","//Game Settings\nexport const HEIGHT = 20;\nexport const WIDTH = 10;\n\n//Color Settings;\nexport const BACKGROUND_COLOR = \"white\";\n\n//Cell colors\nexport const ONE = \"green\";\nexport const TWO = \"blue\";\nexport const THREE = \"orange\";\nexport const FOUR = \"purple\";\nexport const FIVE = \"cyan\";\nexport const SIX = \"yellow\";\nexport const SEVEN = \"red\";\n\nexport const BLACK = \"black\";\n\n//Blank Grid\nexport const GAME_BLANK = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n]);\n\nexport const LOOSE = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BLACK, BLACK, BLACK, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n]);","import {BACKGROUND_COLOR, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN} from \"./settings\";\n\nexport const blank = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n]);\n\nexport const one = ([\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const two = ([\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const three = (\n    [[BACKGROUND_COLOR, THREE, THREE, BACKGROUND_COLOR],\n    [THREE, THREE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]]\n);\n\nexport const four = ([\n    [FOUR, FOUR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, FOUR, FOUR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const five = ([\n    [BACKGROUND_COLOR, FIVE, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [FIVE, FIVE, FIVE, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const six = ([\n    [SIX, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [SIX, SIX, SIX, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);\n\nexport const seven = ([\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, SEVEN, BACKGROUND_COLOR],\n    [SEVEN, SEVEN, SEVEN, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\n    ]);","import {BACKGROUND_COLOR, WIDTH, HEIGHT} from \"./settings\";\n\nimport * as Cells from \"./cellCollection\";\n\nclass Cell{\n    static previousCell = null;\n\n    cell = [[]];\n    isAlive = true;\n\n    cellHeight = 0;\n    cellWidth = 0;\n    rowPos = -1;\n\n    constructor (){\n        this.randomCellSelection();\n        this.findCellSize();\n        this.colPos = Math.floor(Math.random() * (WIDTH - this.cellWidth+1));\n    }\n\n    moveLeft(deadGrid){\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos-1)){\n            this.prevCol = this.colPos;\n            this.colPos--;\n        }\n    }\n\n    moveRight(deadGrid){\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos+1)){\n            this.prevCol = this.colPos;\n            this.colPos++;\n        }\n    }\n\n    moveDown(grid){\n        if (this.willCollide(grid.deadGrid, this.rowPos+1, this.colPos)) {\n            this.isAlive = false;\n            if(this.rowPos < this.cellHeight-1) grid.setLost();\n        }\n        else {\n            this.prevRow = this.rowPos;\n            this.rowPos += 1;\n        }\n    }\n\n    rotate(deadGrid){\n        let newCell = Cells.blank.map(r => r.map(sq => sq));\n        let tempCell = this.cell.map(r => r.map(sq => sq));\n\n        for(let i = this.cellHeight; i > 0; i--){\n            for(let j = this.cellWidth; j > 0; j--){\n                newCell[this.cellWidth- j][this.cellHeight - i] = tempCell[i-1][this.cellWidth - j];\n            }\n        }\n        let currentCell = this.cell.map(r => r.map(sq => sq));\n        this.cell = newCell.map(r => r.map(sq => sq));\n        this.findCellSize();\n        for(let i = 0; i < this.cellWidth; i++){\n            if(!this.willCollide(deadGrid, this.rowPos, this.colPos-i)){\n                this.colPos -= i;\n                break;\n            }\n        }\n        if(this.willCollide(deadGrid, this.rowPos, this.colPos)){\n            this.cell = currentCell.map(r => r.map(sq => sq));\n            this.findCellSize();\n        }\n    }\n\n    willCollide(deadGrid, row, col){\n        if (WIDTH - this.cellWidth < col || col < 0 || row > HEIGHT-1)\n            return true;\n        let nbRow = (this.cellHeight-1 > row) ? row+1 : this.cellHeight;\n        for (let i = 0; i < nbRow; i++){\n            for (let j = 0; j < this.cellWidth; j++){\n                if(deadGrid[row - i][col + j] !== BACKGROUND_COLOR &&\n                    this.cell[this.cellHeight-1 - i][j] !== BACKGROUND_COLOR){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    findCellSize (){\n        //Cell Height\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if (this.cell[i][j] !== BACKGROUND_COLOR) {\n                    this.cellHeight = i+1;\n                }\n            }\n        }\n        //Cell Width\n        for (let k = 0; k < 4; k++) {\n            for (let l = 0; l < 4; l++) {\n                if (this.cell[l][k] !== BACKGROUND_COLOR) {\n                    this.cellWidth = k+1;\n                }\n            }\n        }\n    }\n\n    resetRow(){\n        this.rowPos = -1;\n    }\n    randomCellSelection (){\n        let random = null;\n        do {\n            random = Math.floor(Math.random() * Math.floor(7));\n        } while (random === Cell.previousCell);\n        Cell.previousCell = random;\n        switch (random) {\n            case 0:\n                this.cell = Cells.one;\n                break;\n            case 1:\n                this.cell = Cells.two;\n                break;\n            case 2:\n                this.cell = Cells.three;\n                break;\n            case 3:\n                this.cell = Cells.four;\n                break;\n            case 4:\n                this.cell = Cells.five;\n                break;\n            case 5:\n                this.cell = Cells.six;\n                break;\n            case 6:\n                this.cell = Cells.seven;\n                break;\n            default:\n        }\n    }\n}\n\nexport default Cell;","import {HEIGHT, WIDTH, BACKGROUND_COLOR} from \"./settings\";\n\nclass Grid {\n    livingCell = false;\n    intScore = 0;\n    score = 0;\n    previousScore = 0;\n    level = 1;\n    constructor(){\n        this.grid = Grid.generateGrid([]);\n        this.deadGrid = Grid.generateGrid([]);\n        this.lost = false;\n    }\n\n    setScore(n){\n        this.score += n * this.level;\n        this.intScore += n;\n        if (this.intScore > this.previousScore + 50){\n            this.level++;\n            this.previousScore += 50 + (this.intScore - (this.previousScore+50));\n        }\n    }\n\n    setLost(){\n        this.lost = true;\n    }\n\n    wipeActiveGrid(){\n        this.grid = this.deadGrid.map(r => r.map(c => c));\n    }\n\n    renderCelltoGrid(Cell){\n        if(this.livingCell && !this.lost){\n            let { cell, cellHeight, cellWidth, rowPos, colPos, isAlive} = Cell;\n            if (isAlive){\n                let tempGrid = this.deadGrid.map(r => r.map(c => c));\n                let nbRow = (cellHeight-1 > rowPos) ? rowPos+1 : cellHeight;\n                for (let i = 0; i < nbRow; i++){\n                    for (let j = colPos; j < colPos + cellWidth; j++){\n                        if(cell[cellHeight-1 - i][j - colPos] !== BACKGROUND_COLOR){\n                            tempGrid[rowPos-i][j] = cell[cellHeight-1 - i][j - colPos];\n                        }\n                    }\n                }\n                this.grid = tempGrid;\n            }\n            else if (!isAlive) {\n                this.deadGrid = this.grid.map(r => r.map(c => c));\n            }\n        }\n    }\n\n    addCell(){\n        if(!this.livingCell && !this.lost){\n            this.livingCell = true;\n        }\n    }\n\n    static generateGrid(grid){\n        let genGrid = [];\n        for (let i = grid.length; i < HEIGHT; i++){\n            let row = [];\n            for (let j = 0; j < WIDTH; j++){\n                row = [ ...row, BACKGROUND_COLOR];\n            }\n            genGrid = [ ...genGrid, row];\n        }\n        return [...genGrid, ...grid];\n    }\n\n    shouldGridDestruct(){\n        let tempGrid = this.grid.map(row => row.map(square => square));\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\n            if (compute.length === WIDTH) tab = [...tab, index];\n            return tab;\n        }, []);\n        return lineToDestruct.length > 0;\n    }\n\n    getTempGrid(){\n        let tempGrid = this.grid.map(row => row.map(square => square));\n        let row = [];\n        for (let j = 0; j < WIDTH; j++){\n            row = [ ...row, BACKGROUND_COLOR];\n        }\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\n            if (compute.length === WIDTH) tab = [...tab, index];\n            return tab;\n        }, []);\n        lineToDestruct.reverse();\n        lineToDestruct.forEach(line => tempGrid[line] = row);\n        return tempGrid;\n    }\n\n    handleRowDestruction(){\n        let tempGrid = this.grid.map(row => row.map(square => square));\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\n            if (compute.length === WIDTH) tab = [...tab, index];\n            return tab;\n        }, []);\n        lineToDestruct.reverse();\n        this.setScore(lineToDestruct.length * lineToDestruct.length);\n        lineToDestruct.forEach(line => tempGrid.splice(line,1));\n        if (tempGrid !== this.grid) this.grid = tempGrid;\n        this.grid = Grid.generateGrid(this.grid).map(row => row.map(square => square));\n        this.deadGrid = this.grid;\n    }\n}\n\nexport default Grid;","import {\n    REFRESH_GRID,\n    REFRESH_NEXT_CELL,\n    REFRESH_SAVED_CELL,\n    GAME_LOST,\n    GAME_STARTED,\n    GAME_PAUSED,\n    GAME_RESTARTED, GAME_SCORE, GAME_LEVEL\n} from \"./types\";\n\nexport const refreshGrid = (grid) => {\n    return {\n        type: REFRESH_GRID,\n        payload: grid\n    }\n};\n\nexport const refreshNextCell= (cell) => {\n    return {\n        type: REFRESH_NEXT_CELL,\n        payload: cell\n    }\n};\n\nexport const refreshSavedCell = (cell) => {\n    return {\n        type: REFRESH_SAVED_CELL,\n        payload: cell\n    }\n};\n\nexport const gameStarted = () => {\n    return {\n        type: GAME_STARTED\n    }\n};\n\nexport const gamePaused = () => {\n    return {\n        type: GAME_PAUSED\n    }\n};\n\nexport const gameLost = () => {\n    return {\n        type: GAME_LOST\n    }\n};\n\nexport const gameRestart = () => {\n    return {\n        type: GAME_RESTARTED\n    }\n};\n\nexport const gameScore = (score) => {\n    return {\n        type: GAME_SCORE,\n        payload: score\n    }\n};\n\nexport const gameLevel = (level) => {\n    return {\n        type: GAME_LEVEL,\n        payload: level\n    }\n};","export const REFRESH_GRID = 'REFRESH_GRID';\n\nexport const REFRESH_NEXT_CELL = 'REFRESH_NEXT_CELL';\n\nexport const REFRESH_SAVED_CELL = 'REFRESH_SAVED_CELL';\n\nexport const GAME_STARTED = 'GAME_STARTED';\n\nexport const GAME_LOST = 'GAME_LOST';\n\nexport const GAME_PAUSED = 'GAME_PAUSED';\n\nexport const GAME_RESTARTED = 'GAME_RESTARTED';\n\nexport const GAME_LEVEL = 'GAME_LEVEL';\n\nexport const GAME_SCORE = 'GAME_SCORE';","import {game} from \"./actions\";\n\nconst buttonId = {\n    a: \"BA\",\n    z: \"BZ\",\n    q: \"BQ\",\n    s: \"BS\",\n    d: \"BD\"\n};\n\nconst keyList = ['a', 'z', 'q', 's', 'd'];\n\n//Sets event listeners\nexport const events = () => {\n    document.onkeypress =  handleKeyPress;\n    document.onkeyup = handleKeyUp;\n};\n\nlet keyPressedId = -1;\nlet lastKeyPressed = null;\nfunction handleKeyPress(e){\n    let key = e.key.toLowerCase();\n    if(key === 'a' || key === 'z' || key === 'q' || key === 's' || key === 'd' ) {\n        if (e.key !== lastKeyPressed) {\n            handleKeyUp();\n        }\n        if (keyPressedId === -1) {\n            let btn = document.getElementById(buttonId[e.key.toLowerCase()]);\n            btn.className += \" active\";\n            lastKeyPressed = key;\n            if(key !== 'a' && key !== 'z' ){\n                game(key);\n                keyPressedId = setInterval(() => game(key), 90);\n            }else {\n                lastKeyPressed = key;\n                game(key);\n                keyPressedId = 0;\n            }\n        }\n    }\n}\nfunction handleKeyUp(e) {\n    if(e)\n        if(keyList.some(key => key === e.key.toLowerCase())){\n            let btn = document.getElementById(buttonId[e.key.toLowerCase()]);\n            btn.classList.remove(\"active\");\n        }\n    if(keyPressedId!==-1) {  //Only stop if exists\n        clearTimeout(keyPressedId);\n        keyPressedId=-1;\n    }\n}\n","import {store} from \"../../index\";\nimport { refreshGrid } from \"../../actions\";\n\nimport {HEIGHT, WIDTH} from \"../../game/settings\";\n\nconst cell = \"black\";\n\nexport const fillGrid = (gameGrid, seq) =>{\n    let tempGrid = gameGrid;\n    let row = HEIGHT-1;\n    let lastAnim = 0;\n    const fillGridAnimation = (timestamp) => {\n        let currentFrame = timestamp;\n        if(row >= 0) {\n            if (currentFrame - lastAnim > 0){\n                lastAnim = currentFrame;\n                for(let i = 0; i < WIDTH; i++){\n                    tempGrid[row][i] = cell;\n                }\n                store.dispatch(refreshGrid(tempGrid));\n                row--;\n                if (row === -1) seq();\n            }\n            requestAnimationFrame(fillGridAnimation);\n        }\n    };\n    requestAnimationFrame(fillGridAnimation);\n};\n","import {store} from \"../../index\";\nimport { refreshGrid } from \"../../actions\";\n\nimport {BACKGROUND_COLOR, HEIGHT, WIDTH} from \"../../game/settings\";\nconst cell = BACKGROUND_COLOR;\n\nexport const emptyGrid = (gameGrid, seq) =>{\n    let tempGrid = gameGrid;\n    let lastAnim = 0;\n    let row = 0;\n    const fillGridAnimation = (timestamp) => {\n        let currentFrame = timestamp;\n        if(row < HEIGHT) {\n            if (currentFrame - lastAnim > 0){\n                lastAnim = currentFrame;\n                for(let i = 0; i < WIDTH; i++){\n                    tempGrid[row][i] = cell;\n                }\n                store.dispatch(refreshGrid(tempGrid));\n                row++;\n                if( row === HEIGHT ) seq();\n            }\n            requestAnimationFrame(fillGridAnimation);\n        }\n        else seq()\n    };\n    requestAnimationFrame(fillGridAnimation);\n};\n","import { anim, setAnim } from \"../index\";\n\nimport {fillGrid} from \"./fillGrid\";\nimport {emptyGrid} from \"./emptyGrid\";\n\nlet sequence = 1;\nexport const incrementSequence = () => {\n    sequence += 1;\n};\n\nexport const fillInFillOut = (gameGrid) =>{\n    if(!anim){\n        let lastAnim = 0;\n        let tempGrid = gameGrid.map(row => row.map(square => square));\n        sequence = 1;\n\n        const fillInFillOutAnim = (timestamp) =>{\n            if(sequence){\n                setAnim(true);\n                if (timestamp - lastAnim > 100){\n                    if(sequence === 1){\n                        fillGrid(tempGrid, incrementSequence);\n                        sequence++;\n                    }\n                    if(sequence === 3){\n                        emptyGrid(tempGrid, incrementSequence);\n                        sequence++;\n                    }\n                }\n                if (sequence > 5) {\n                    setAnim(false);\n                    sequence = 0;\n                }\n                requestAnimationFrame(fillInFillOutAnim);\n            }\n        };\n        requestAnimationFrame(fillInFillOutAnim);\n    }\n};\n","import Grid from \"../game/Grid\";\nimport Cell from \"../game/Cell\";\nimport {blank} from \"../game/cellCollection\";\n\nimport {store} from \"../index\";\nimport {gamePaused, gameRestart, gameStarted, refreshNextCell} from \"../actions\";\n\nimport {game} from \"./actions\";\nimport {events} from \"./keybind\";\nimport {fillInFillOut} from \"./animations/fillInFillOut\";\n\n//Contains all essential variables in an object\nexport const gameState = {\n    gameGrid: null,\n    cell: null,\n    nextCell: null,\n    isSavedCell: null,\n    isStarted: null,\n    isPaused: null\n};\n//Set initial values\nconst setInitValues = () => {\n    gameState.gameGrid = new Grid();\n    gameState.cell = new Cell();\n    gameState.nextCell = new Cell();\n    gameState.savedCell = {cell: blank};\n    gameState.isSavedCell = false;\n    gameState.isStarted = false;\n    gameState.isPaused = false;\n    gameState.gameGrid.addCell();\n};\n\n//Reset the game\nexport const reset = () => {\n    setInitValues();\n    store.dispatch(gameRestart());\n    fillInFillOut(gameState.gameGrid.grid, anim, setAnim);\n};\n\n//Animation variable, set to true if there is an animation running\nexport let anim = false;\nexport const setAnim = (value) =>{\n    anim = value;\n};\n\n//Main game loop, move down current cell based on current level\nlet last = 0;\nconst loop = (timestamp) =>{\n    let dif = gameState.gameGrid.level < 10 ? gameState.gameGrid.level*120 : 1080;\n    if(gameState.cell && !gameState.isPaused && !anim && !gameState.gameGrid.lost){\n        let current = timestamp;\n        if(current - last > 1200 - dif){\n            game('DOWN');\n            last = current;\n        }\n        requestAnimationFrame(loop);\n    }\n};\n//Starts game loop\nexport const setLoop = () =>{\n    requestAnimationFrame(loop);\n};\n\n//Start sequence function, resume if paused\nexport const start = () => {\n    if(!gameState.isStarted){\n        setInitValues();\n        gameState.isStarted = true;\n        store.dispatch(refreshNextCell(gameState.nextCell.cell));\n        store.dispatch(gameStarted());\n        events();\n        requestAnimationFrame(loop);\n    }\n    else if(gameState.isPaused) paused();\n};\n\n//Set game to pause or resume if paused\nexport const paused = () => {\n    if(gameState.isStarted){\n        if(gameState.isPaused){\n            gameState.isPaused = false;\n            requestAnimationFrame(loop);\n            store.dispatch(gameStarted());\n        }\n        else {\n            gameState.isPaused = true;\n            store.dispatch(gamePaused());\n        }\n    }\n};\n","import {fillGrid} from \"./fillGrid\";\nimport {emptyGrid} from \"./emptyGrid\";\nimport {store} from \"../../index\";\nimport {refreshGrid} from \"../../actions\";\nimport {GAME_BLANK, LOOSE} from \"../../game/settings\";\n\nlet sequence = 1;\nconst incrementSequence = () => {\n  sequence += 1;\n};\nexport const lostAnimation = (gameGrid) =>{\n\n    let lastAnim = 0;\n    let tempGrid = gameGrid.map(row => row.map(square => square));\n    sequence = 1;\n\n    let count = 0;\n    let lostAnim = 0;\n    const blinkLoose = (timestamp) => {\n        if (count < 10) {\n            if(timestamp - lostAnim > 250){\n                if(count % 2 !== 0) store.dispatch(refreshGrid(LOOSE));\n                else store.dispatch(refreshGrid(GAME_BLANK));\n                lostAnim = timestamp;\n                count++;\n            }\n            requestAnimationFrame(blinkLoose);\n        }\n    };\n\n    const lostAnimationLoop = (timestamp) =>{\n        if(sequence){\n            if (timestamp - lastAnim > 100){\n                if(sequence === 1){\n                    fillGrid(tempGrid, incrementSequence);\n                    sequence++;\n                }\n                if(sequence === 3){\n                    emptyGrid(tempGrid, incrementSequence);\n                    sequence++;\n                }\n                if(sequence === 5){\n                    requestAnimationFrame(blinkLoose);\n                }\n            }\n            requestAnimationFrame(lostAnimationLoop);\n        }\n    };\n    requestAnimationFrame(lostAnimationLoop);\n};\n","import {store} from \"../../index\";\nimport {gameLevel, gameScore, refreshGrid} from \"../../actions\";\n\nimport { setAnim, setLoop } from \"../index\";\n\nlet count = 0;\nlet lastAnim = 0;\n\nexport const rowDestruction = (tempGrid, gameGrid) =>{\n    const rowDestructionAnimation = (timestamp) => {\n        let currentFrame = timestamp;\n        if(count < 7 && currentFrame - lastAnim >= 100){\n            if(count % 2 !== 0 && count < 6) store.dispatch(refreshGrid(tempGrid));\n            else if (count < 6) store.dispatch(refreshGrid(gameGrid.grid));\n            lastAnim = currentFrame;\n            count++;\n            requestAnimationFrame(rowDestructionAnimation);\n        }else if (count >= 7){\n            gameGrid.handleRowDestruction();\n            store.dispatch(refreshGrid(gameGrid.grid));\n            store.dispatch(gameScore(gameGrid.score));\n            store.dispatch(gameLevel(gameGrid.level));\n            count = 0;\n            setAnim(false);\n            setLoop();\n        }else if (count < 7){\n            requestAnimationFrame(rowDestructionAnimation);\n        }\n    };\n    requestAnimationFrame(rowDestructionAnimation);\n};","import Cell from \"../game/Cell\";\nimport {gameState, anim, setAnim} from \"./index\";\n\nimport {store} from \"../index\";\nimport {\n    gameLost,\n    refreshGrid,\n    refreshNextCell,\n    refreshSavedCell\n} from \"../actions\";\n\nimport {lostAnimation} from \"./animations/lostAnimation\";\nimport {rowDestruction} from \"./animations/rowDestruction\";\n\n//Handles cell move, and controls game state\nexport const game = (move) => {\n    if(gameState.isStarted){\n        if (!gameState.gameGrid.lost && !gameState.isPaused && !gameState.gameGrid.lost && !anim) {\n            if (!gameState.cell.isAlive && !gameState.gameGrid.lost) {\n                gameState.cell = gameState.nextCell;\n                gameState.nextCell = new Cell();\n                store.dispatch(refreshNextCell(gameState.nextCell.cell));\n            }\n            if (gameState.cell) {\n                switch (move) {\n                    case 'a':\n                        if (gameState.isSavedCell) {\n                            let tempCell = gameState.savedCell;\n                            gameState.savedCell = gameState.cell;\n                            gameState.cell = tempCell;\n                            gameState.savedCell.resetRow();\n                        } else {\n                            gameState.gameGrid.wipeActiveGrid();\n                            gameState.savedCell = gameState.cell;\n                            gameState.savedCell.resetRow();\n                            gameState.cell = gameState.nextCell;\n                            gameState.nextCell = new Cell();\n                            gameState.isSavedCell = true;\n                            store.dispatch(refreshNextCell(gameState.nextCell.cell));\n                        }\n                        store.dispatch(refreshSavedCell(gameState.savedCell.cell));\n                        break;\n                    case 's':\n                    case 'DOWN':\n                        gameState.cell.moveDown(gameState.gameGrid);\n                        break;\n                    case 'd':\n                    case 'RIGHT':\n                        gameState.cell.moveRight(gameState.gameGrid.deadGrid);\n                        break;\n                    case 'q':\n                    case 'LEFT':\n                        gameState.cell.moveLeft(gameState.gameGrid.deadGrid);\n                        break;\n                    case 'z':\n                    case 'ROTATE':\n                        gameState.cell.rotate(gameState.gameGrid.deadGrid);\n                        break;\n                    default:\n                }\n            }\n            if (gameState.gameGrid.lost) {\n                store.dispatch(gameLost());\n                setTimeout(() => lostAnimation(gameState.gameGrid.grid),250);\n            }\n            gameState.gameGrid.renderCelltoGrid(gameState.cell);\n            if (!gameState.cell.isAlive) {\n                if (gameState.gameGrid.shouldGridDestruct()) {\n                    rowDestruction(gameState.gameGrid.getTempGrid(), gameState.gameGrid);\n                    setAnim(true);\n                }\n            }\n            store.dispatch(refreshGrid(gameState.gameGrid.grid));\n        }\n    }\n};\n","import React from 'react'\n\nimport './controls.css';\n\nimport Button from \"./Button\"\n\nimport { game } from \"../../loop/actions\";\nimport { paused, reset, start} from \"../../loop/index\";\n\n\nconst Controls = () => {\n\n    return(\n        <div className=\"controls-box\">\n            <div className=\"controls\">\n                <div className=\"row\">\n                    <span className=\"start-btn\" onClick={() => start()}>START</span>\n                    <span className=\"start-btn\" onClick={() => paused()}>PAUSE</span>\n                    <span className=\"start-btn\" onClick={() => reset()}>RESET</span>\n                </div>\n                <div className=\"row\">\n                    <div className=\"game-btn\">\n                        <Button id=\"BA\" type=\"single\" input=\"a\" action={game}>\n                            A\n                        </Button>\n                        SAVE\n                    </div>\n                    <div className=\"game-btn\">\n                        <Button id=\"BZ\" type=\"single\" input=\"ROTATE\" action={game}>\n                            Z\n                        </Button>\n                        ROTATE\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"game-btn\">\n                        <Button id=\"BQ\" type=\"repeat\" input=\"q\" action={game}>\n                            Q\n                        </Button>\n                        LEFT\n                    </div>\n                    <div className=\"game-btn\">\n                        <Button id=\"BD\" type=\"repeat\" input=\"d\" action={game}>\n                            D\n                        </Button>\n                        RIGHT\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"game-btn\">\n                        <Button id=\"BS\" type=\"repeat\" input=\"s\" action={game}>\n                            S\n                        </Button>\n                        DOWN\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Controls;","import React from 'react';\n\nimport Grid from \"../assets/Grid\";\nimport {connect} from \"react-redux\";\n\nclass CenterGrid extends React.Component{\n\n    render() {\n        const { grid } = this.props;\n        return (\n                <Grid className=\"centeredgame\" grid={grid} id=\"C\"/>\n        )\n    }\n}\n\nconst mapStateToProps = ({grid}) =>{\n   return {\n       grid\n   }\n};\nexport default connect(mapStateToProps)(CenterGrid);","import React from 'react';\n\nimport './layout.css';\n\nimport LeftInfo from \"./LeftInfo\";\nimport RightInfo from \"./RightInfo\";\nimport Controls from \"./Controls/Controls\";\nimport CenterGrid from \"./CenterGrid\";\n\nconst Layout = () => {\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-box\">\n                <div className=\"game-grid\">\n                    <LeftInfo/>\n                    <CenterGrid/>\n                    <RightInfo/>\n                </div>\n                <Controls/>\n            </div>\n        </div>\n    )\n};\n\nexport default Layout;","import { combineReducers } from \"redux\";\n\nimport gridReducer from './gridReducer';\nimport nextCellReducer from './nextCellReducer';\nimport savedCellReducer from './savedCellReducer';\nimport gameStateReducer from \"./gameStateReducer\";\nimport gameLevelReducer from \"./gameLevelReducer\";\nimport gameScoreReducer from \"./gameScoreReducer\";\n\nexport default combineReducers({\n    grid: gridReducer,\n    nextCell: nextCellReducer,\n    savedCell: savedCellReducer,\n    gameState: gameStateReducer,\n    gameLevel: gameLevelReducer,\n    gameScore: gameScoreReducer,\n});","import {GAME_RESTARTED, REFRESH_GRID} from \"../actions/types\";\nimport {GAME_BLANK} from \"../game/settings\";\n\nexport default (state = GAME_BLANK.map(row => row.map( square => square)), action) => {\n    switch (action.type) {\n        case REFRESH_GRID:\n            return action.payload.map(row => row.map( square => square));\n        case GAME_RESTARTED:\n            return GAME_BLANK;\n        default:\n            return state;\n    }\n};\n","import {GAME_RESTARTED, REFRESH_NEXT_CELL} from \"../actions/types\";\nimport {blank} from \"../game/cellCollection\";\n\nexport default (state = blank, action) => {\n    switch (action.type) {\n        case REFRESH_NEXT_CELL:\n            return action.payload.map(row => row.map( square => square));\n        case GAME_RESTARTED:\n            return blank;\n        default:\n            return state;\n    }\n};\n","import {GAME_RESTARTED, REFRESH_SAVED_CELL} from \"../actions/types\";\nimport {blank} from \"../game/cellCollection\";\n\nexport default (state = blank, action) => {\n    switch (action.type) {\n        case REFRESH_SAVED_CELL:\n            return action.payload.map(row => row.map( square => square));\n        case GAME_RESTARTED:\n            return blank;\n        default:\n            return state;\n    }\n};\n","import {GAME_LOST, GAME_STARTED, GAME_PAUSED, GAME_RESTARTED} from \"../actions/types\";\n\nexport default (state = '', action) => {\n    switch (action.type) {\n        case GAME_STARTED:\n            return 'Jeu en cours...';\n        case GAME_PAUSED:\n            return 'En pause.';\n        case GAME_LOST:\n            return 'Perdu !';\n        case GAME_RESTARTED:\n            return '';\n        default:\n            return state;\n    }\n};\n","import {GAME_LEVEL, GAME_RESTARTED} from \"../actions/types\";\n\nexport default (state = 1, action) => {\n    switch (action.type) {\n        case GAME_LEVEL:\n            return action.payload;\n        case GAME_RESTARTED:\n            return 1;\n        default:\n            return state;\n    }\n};\n","import {GAME_RESTARTED, GAME_SCORE} from \"../actions/types\";\n\nexport default (state = 0, action) => {\n    switch (action.type) {\n        case GAME_SCORE:\n            return action.payload;\n        case GAME_RESTARTED:\n            return 0;\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport './index.css';\n\nimport Layout from './components/Layout';\nimport reducers from './reducers';\n\nexport const store = createStore(reducers);\n\nReactDom.render(\n    <Provider store={store}>\n        <Layout />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}