{"version":3,"sources":["game/settings.js","game/Grid.js","game/cellCollection.js","game/Cell.js","game/Main.js","components/App.js","index.js"],"names":["WIDTH","ONE","TWO","FOUR","SIX","Grid","Object","classCallCheck","this","livingCell","intScore","score","previousScore","level","grid","generateGrid","deadGrid","lost","n","map","r","c","Cell","cell","cellHeight","cellWidth","rowPos","colPos","isAlive","tempGrid","nbRow","i","j","row","square","lineToDestruct","reduce","tab","index","filter","length","concat","toConsumableArray","reverse","setScore","forEach","line","splice","genGrid","blank","one","two","three","four","five","six","seven","arguments","undefined","randomCellSelection","findCellSize","Math","floor","random","willCollide","prevCol","setLost","prevRow","newCell","tempCell","sq","currentCell","col","HEIGHT","k","l","previousCell","Cells","gameGrid","nextCell","savedCell","isSavedCell","isStarted","addCell","last","mainLoop","timestamp","dif","current","Game","requestAnimationFrame","move","resetRow","wipeActiveGrid","moveDown","moveRight","moveLeft","rotate","renderCelltoGrid","handleRowDestruction","objectSpread","App","_useState","useState","_useState2","slicedToArray","setGrid","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","setLevel","_useState9","_useState10","setNextCell","_useState11","_useState12","setSavedCell","game","useEffect","handleOnClick","react_default","a","createElement","Fragment","className","onKeyDown","e","key","ci","Button","color","onClick","circular","inverted","icon","size","onMouseDown","ReactDom","render","components_App","document","querySelector"],"mappings":"2OAEaA,EAAQ,GAMRC,EAAM,QACNC,EAAM,OAENC,EAAO,SAEPC,EAAM,SCyEJC,aA9EX,SAAAA,IAAcC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KALdC,YAAa,EAKAD,KAJbE,SAAW,EAIEF,KAHbG,MAAQ,EAGKH,KAFbI,cAAgB,EAEHJ,KADbK,MAAQ,EAEJL,KAAKM,KAAOT,EAAKU,aAAa,IAC9BP,KAAKQ,SAAWX,EAAKU,aAAa,IAClCP,KAAKS,MAAO,uDAGPC,GACLV,KAAKG,OAASO,EAAIV,KAAKK,MACvBL,KAAKE,UAAYQ,EACbV,KAAKE,SAAWF,KAAKI,cAAgB,KACrCJ,KAAKK,QACLL,KAAKI,eAAuBJ,KAAKE,UAAYF,KAAKI,cAAc,IAA1C,sCAK1BJ,KAAKS,MAAO,2CAIZT,KAAKM,KAAON,KAAKQ,SAASG,IAAI,SAAAC,GAAC,OAAIA,EAAED,IAAI,SAAAE,GAAC,OAAIA,+CAGjCC,GACb,GAAGd,KAAKC,aAAeD,KAAKS,KAAK,KACvBM,EAAwDD,EAAxDC,KAAMC,EAAkDF,EAAlDE,WAAYC,EAAsCH,EAAtCG,UAAWC,EAA2BJ,EAA3BI,OAAQC,EAAmBL,EAAnBK,OAAQC,EAAWN,EAAXM,QACnD,GAAIA,EAAQ,CAGR,IAFA,IAAIC,EAAWrB,KAAKQ,SAASG,IAAI,SAAAC,GAAC,OAAIA,EAAED,IAAI,SAAAE,GAAC,OAAIA,MAC7CS,EAASN,EAAW,EAAIE,EAAUA,EAAO,EAAIF,EACxCO,EAAI,EAAGA,EAAID,EAAOC,IACvB,IAAK,IAAIC,EAAIL,EAAQK,EAAIL,EAASF,EAAWO,IDjCjC,UCkCLT,EAAKC,EAAW,EAAIO,GAAGC,EAAIL,KAC1BE,EAASH,EAAOK,GAAGC,GAAKT,EAAKC,EAAW,EAAIO,GAAGC,EAAIL,IAI/DnB,KAAKM,KAAOe,OAEND,IACNpB,KAAKQ,SAAWR,KAAKM,KAAKK,IAAI,SAAAC,GAAC,OAAIA,EAAED,IAAI,SAAAE,GAAC,OAAIA,0CAMlDb,KAAKC,YAAeD,KAAKS,OACzBT,KAAKC,YAAa,kDAiBtB,IAAIoB,EAAWrB,KAAKM,KAAKK,IAAI,SAAAc,GAAG,OAAIA,EAAId,IAAI,SAAAe,GAAM,OAAIA,MAChDC,EAAiBN,EAASO,OAAO,SAACC,EAAKJ,EAAKK,GAG9C,OAFgBL,EAAIM,OAAO,SAAChB,EAAMe,EAAOL,GAAd,OAAsBA,GAAgB,UAATV,IAC5CiB,SAAWxC,IAAOqC,EAAG,GAAAI,OAAAnC,OAAAoC,EAAA,EAAApC,CAAO+B,GAAP,CAAYC,KACtCD,GACR,IACHF,EAAeQ,UACfnC,KAAKoC,SAAST,EAAeK,OAASL,EAAeK,QACrDL,EAAeU,QAAQ,SAAAC,GAAI,OAAIjB,EAASkB,OAAOD,EAAK,KAChDjB,IAAarB,KAAKM,OAAMN,KAAKM,KAAOe,GACxCrB,KAAKM,KAAOT,EAAKU,aAAaP,KAAKM,MAAMK,IAAI,SAAAc,GAAG,OAAIA,EAAId,IAAI,SAAAe,GAAM,OAAIA,MACtE1B,KAAKQ,SAAWR,KAAKM,4CAxBLA,GAEhB,IADA,IAAIkC,EAAU,GACLjB,EAAIjB,EAAK0B,OAAQT,ED3DZ,GC2DwBA,IAAI,CAEtC,IADA,IAAIE,EAAM,GACDD,EAAI,EAAGA,EAAIhC,EAAOgC,IACvBC,EAAG,GAAAQ,OAAAnC,OAAAoC,EAAA,EAAApC,CAAQ2B,GAAR,CD1Da,UC4DpBe,EAAO,GAAAP,OAAAnC,OAAAoC,EAAA,EAAApC,CAAQ0C,GAAR,CAAiBf,IAE5B,SAAAQ,OAAAnC,OAAAoC,EAAA,EAAApC,CAAW0C,GAAX1C,OAAAoC,EAAA,EAAApC,CAAuBQ,aCjElBmC,EAAS,CAClB,CFE4B,iCED5B,CFC4B,iCEA5B,CFA4B,iCEC5B,CFD4B,kCEInBC,EAAO,CAChB,CAACjD,EAAKA,EFLsB,iBEM5B,CAACA,EAAKA,EFNsB,iBEO5B,CFP4B,iCEQ5B,CFR4B,kCEWnBkD,EAAO,CAChB,CAACjD,EFZ2B,yBEa5B,CAACA,EFb2B,yBEc5B,CAACA,EFd2B,yBEe5B,CAACA,EFf2B,0BEkBnBkD,EACT,CAAC,CFnB2B,QAKX,kBALW,SEoB5B,CFfiB,kBALW,iBEqB5B,CFrB4B,iCEsB5B,CFtB4B,kCEyBnBC,EAAQ,CACjB,CAAClD,EAAMA,EF1BqB,iBE2B5B,CF3B4B,QE2BTA,EAAMA,EF3BG,SE4B5B,CF5B4B,iCE6B5B,CF7B4B,kCEgCnBmD,EAAQ,CACjB,CFjC4B,QAOZ,OAPY,iBEkC5B,CF3BgB,qBAPY,SEmC5B,CFnC4B,iCEoC5B,CFpC4B,kCEuCnBC,EAAO,CAChB,CAACnD,EFxC2B,yBEyC5B,CAACA,EAAKA,EAAKA,EFzCiB,SE0C5B,CF1C4B,iCE2C5B,CF3C4B,kCE8CnBoD,EAAS,CAClB,CF/C4B,gBASX,MATW,SEgD5B,CFvCiB,kBATW,SEiD5B,CFjD4B,iCEkD5B,CFlD4B,kCGD1BlC,aAUF,SAAAA,IAA6B,IAAhBN,EAAgByC,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAL,KAAKnD,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,GAAAd,KAP7Be,KAAO,KAOsBf,KAN7BoB,SAAU,EAMmBpB,KAJ7BgB,WAAa,EAIgBhB,KAH7BiB,UAAY,EAGiBjB,KAF7BkB,QAAU,EAGNlB,KAAKmD,sBACLnD,KAAKoD,eACLpD,KAAKmB,OAASkC,KAAKC,MAAMD,KAAKE,UAAY/D,EAAQQ,KAAKiB,UAAU,IAC7DT,GAAYR,KAAKwD,YAAYhD,EAAUR,KAAKkB,OAAO,EAAElB,KAAKmB,UAASnB,KAAKe,KAAO,2DAG9EP,GACAR,KAAKwD,YAAYhD,EAAUR,KAAKkB,OAAQlB,KAAKmB,OAAO,KACrDnB,KAAKyD,QAAUzD,KAAKmB,OACpBnB,KAAKmB,4CAIHX,GACDR,KAAKwD,YAAYhD,EAAUR,KAAKkB,OAAQlB,KAAKmB,OAAO,KACrDnB,KAAKyD,QAAUzD,KAAKmB,OACpBnB,KAAKmB,2CAIJb,GACDN,KAAKwD,YAAYlD,EAAKE,SAAUR,KAAKkB,OAAO,EAAGlB,KAAKmB,SACpDnB,KAAKoB,SAAU,EACZpB,KAAKkB,OAASlB,KAAKgB,WAAW,GAAGV,EAAKoD,YAGzC1D,KAAK2D,QAAU3D,KAAKkB,OACpBlB,KAAKkB,QAAU,kCAIhBV,GASH,IARA,IAAIoD,EAAU,CACV,CAAC,QAAS,QAAS,QAAS,SAC5B,CAAC,QAAS,QAAS,QAAS,SAC5B,CAAC,QAAS,QAAS,QAAS,SAC5B,CAAC,QAAS,QAAS,QAAS,UAE5BC,EAAW7D,KAAKe,KAAKJ,IAAI,SAAAC,GAAC,OAAIA,EAAED,IAAI,SAAAmD,GAAE,OAAIA,MAEtCvC,EAAIvB,KAAKgB,WAAYO,EAAI,EAAGA,IAChC,IAAI,IAAIC,EAAIxB,KAAKiB,UAAWO,EAAI,EAAGA,IAC/BoC,EAAQ5D,KAAKiB,UAAWO,GAAGxB,KAAKgB,WAAaO,GAAKsC,EAAStC,EAAE,GAAGvB,KAAKiB,UAAYO,GAGzF,IAAIuC,EAAc/D,KAAKe,KAAKJ,IAAI,SAAAC,GAAC,OAAIA,EAAED,IAAI,SAAAmD,GAAE,OAAIA,MACjD9D,KAAKe,KAAO6C,EAAQjD,IAAI,SAAAC,GAAC,OAAIA,EAAED,IAAI,SAAAmD,GAAE,OAAIA,MACzC9D,KAAKoD,eACFpD,KAAKwD,YAAYhD,EAAUR,KAAKkB,OAAQlB,KAAKmB,UAC5CnB,KAAKe,KAAOgD,EAAYpD,IAAI,SAAAC,GAAC,OAAIA,EAAED,IAAI,SAAAmD,GAAE,OAAIA,MAC7C9D,KAAKoD,oDAID5C,EAAUiB,EAAKuC,GACvB,GAAIxE,EAAQQ,KAAKiB,UAAY+C,GAAOA,EAAM,GAAKvC,EAAMwC,GACjD,OAAO,EAEX,IADA,IAAI3C,EAAStB,KAAKgB,WAAW,EAAIS,EAAOA,EAAMzB,KAAKgB,WAC1CO,EAAI,EAAGA,EAAID,EAAOC,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,KAAKiB,UAAWO,IAChC,GHtEgB,UGsEbhB,EAASiB,EAAMF,GAAGyC,EAAMxC,IHtEX,UGuEZxB,KAAKe,KAAKf,KAAKgB,WAAW,EAAIO,GAAGC,GACjC,OAAO,EAKnB,OAAO,yCAKP,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IHnFH,UGoFZxB,KAAKe,KAAKQ,GAAGC,KACbxB,KAAKgB,WAAaO,EAAE,GAKhC,IAAK,IAAI2C,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IH3FH,UG4FZnE,KAAKe,KAAKoD,GAAGD,KACblE,KAAKiB,UAAYiD,EAAE,sCAO/BlE,KAAKkB,QAAU,gDAGf,IAAIqC,EAAS,KACb,GACIA,EAASF,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,UAC1CC,IAAWzC,EAAKsD,cAEzB,OADAtD,EAAKsD,aAAeb,EACZA,GACJ,KAAK,EACDvD,KAAKe,KAAOsD,EACZ,MACJ,KAAK,EACDrE,KAAKe,KAAOsD,EACZ,MACJ,KAAK,EACDrE,KAAKe,KAAOsD,EACZ,MACJ,KAAK,EACDrE,KAAKe,KAAOsD,EACZ,MACJ,KAAK,EACDrE,KAAKe,KAAOsD,EACZ,MACJ,KAAK,EACDrE,KAAKe,KAAOsD,EACZ,MACJ,KAAK,EACDrE,KAAKe,KAAOsD,YAjItBvD,EACKsD,aAAe,KAuIXtD,QCxITwD,EAAW,IAAIzE,EACjBkB,EAAO,IAAID,EACXyD,EAAW,IAAIzD,EACf0D,EAAY,CAACzD,KAAM0B,GACnBgC,GAAc,EACdC,GAAY,EAChBJ,EAASK,UAET,IAAIC,EAAO,EAEX,SAASC,EAASC,GACd,IAAIC,EAAMT,EAASjE,MAAQ,GAAoB,IAAfiE,EAASjE,MAAY,IACrD,GAAGU,EAAK,CACJ,IAAIiE,EAAUF,EACXE,EAAUJ,EAAO,KAAOG,IACvBE,EAAK,QACLL,EAAOI,GAEXE,sBAAsBL,IASvB,SAASI,EAAKE,GAKjB,GAJIpE,EAAKK,UACLL,EAAOwD,EACPA,EAAW,IAAIzD,EAAKwD,EAAS9D,WAE9BO,GAAQ2D,EACP,OAAQS,GACJ,IAAK,IACD,GAAIV,EAAa,CACb,IAAIZ,EAAWW,EACfA,EAAYzD,EACZA,EAAO8C,EACPW,EAAUY,gBAGVd,EAASe,kBACTb,EAAYzD,GACFqE,WACVrE,EAAO,IAAID,EAAKwD,EAAS9D,UACzBiE,GAAc,EAElB,MACJ,IAAK,IACL,IAAK,OACD1D,EAAKuE,SAAShB,GACd,MACJ,IAAK,IACL,IAAK,QACDvD,EAAKwE,UAAUjB,EAAS9D,UACxB,MACJ,IAAK,IACL,IAAK,OACDO,EAAKyE,SAASlB,EAAS9D,UACvB,MACJ,IAAK,IACL,IAAK,SACDO,EAAK0E,OAAOnB,EAAS9D,UAOjC,OAFA8D,EAASoB,iBAAiB3E,GACtBA,EAAKK,SAASkD,EAASqB,uBACpB7F,OAAA8F,EAAA,EAAA9F,CAAA,GAAIwE,EAAaC,EAAxB,CAAkCC,2BCiBvBqB,UArFH,WAAM,IAAAC,EACUC,mBAASjG,OAAAoC,EAAA,EAAApC,CAAKmF,IAAO3E,OAD/B0F,EAAAlG,OAAAmG,EAAA,EAAAnG,CAAAgG,EAAA,GACPxF,EADO0F,EAAA,GACDE,EADCF,EAAA,GAAAG,EAEUJ,mBAASd,IAAOxE,MAF1B2F,EAAAtG,OAAAmG,EAAA,EAAAnG,CAAAqG,EAAA,GAEP1F,EAFO2F,EAAA,GAED1C,EAFC0C,EAAA,GAAAC,EAGYN,mBAASd,IAAO9E,OAH5BmG,EAAAxG,OAAAmG,EAAA,EAAAnG,CAAAuG,EAAA,GAGPlG,EAHOmG,EAAA,GAGAlE,EAHAkE,EAAA,GAAAC,EAIYR,mBAASd,IAAO5E,OAJ5BmG,EAAA1G,OAAAmG,EAAA,EAAAnG,CAAAyG,EAAA,GAIPlG,EAJOmG,EAAA,GAIAC,EAJAD,EAAA,GAAAE,EAKkBX,mBAASd,IAAOlE,MALlC4F,EAAA7G,OAAAmG,EAAA,EAAAnG,CAAA4G,EAAA,GAKPnC,EALOoC,EAAA,GAKGC,EALHD,EAAA,GAAAE,EAMoBd,mBAASd,IAAOT,UAAUzD,MAN9C+F,EAAAhH,OAAAmG,EAAA,EAAAnG,CAAA+G,EAAA,GAMPrC,EANOsC,EAAA,GAMIC,EANJD,EAAA,GAORE,EAAO,SAAA7B,GAAI,OAAIF,EAAKE,IAG1B8B,oBAAU,WACNF,EAAa9B,IAAOT,UAAUzD,OAC/B,CAACkE,IAAOT,UAAUzD,OAGrBkG,oBAAU,WACNL,EAAY3B,IAAOlE,OACpB,CAACkE,IAAOlE,OAGXkG,oBAAU,WACNR,EAASO,IAAO3G,QACjB,CAAC2G,IAAO3G,QAGX4G,oBAAU,WACNf,EAAQc,IAAO1G,OAChB,CAAC0G,IAAO1G,OAGX2G,oBAAU,WACNvD,EAAQsD,IAAOvG,OAChB,CAACuG,IAAOvG,OAGXwG,oBAAU,WACN7E,EAAS4E,IAAO7G,QACjB,CAAC6G,IAAO7G,QAEX,IAAM+G,EAAgB,SAAA/B,GAClB6B,EAAK7B,IAOT,OACIgC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAOC,UANP,SAAAC,GACnBT,EAAKS,EAAEC,OAMCP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACV/C,EAAU7D,IAAI,SAACC,EAAEW,GAAH,OAAS4F,EAAAC,EAAAC,cAAA,SAAKzG,EAAED,IAAK,SAACE,EAAG8G,GAAJ,OAAWR,EAAAC,EAAAC,cAAA,KAAGE,UAAW1G,UAEjEsG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACVjH,EAAKK,IAAI,SAACC,EAAEW,GAAH,OAAS4F,EAAAC,EAAAC,cAAA,KAAGK,IAAG,IAAAzF,OAAMV,IAAOX,EAAED,IAAK,SAACE,EAAG8G,GAAJ,OAAWR,EAAAC,EAAAC,cAAA,KAAGE,UAAW1G,EAAG6G,IAAG,GAAAzF,OAAKV,GAALU,OAAS0F,WAEzFR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACVhD,EAAS5D,IAAI,SAAAC,GAAC,OAAGuG,EAAAC,EAAAC,cAAA,SAAKzG,EAAED,IAAI,SAAAmD,GAAE,OAAIqD,EAAAC,EAAAC,cAAA,KAAGE,UAAWzD,SAAaqD,EAAAC,EAAAC,cAAA,YAFtE,WAIahH,EAAM8G,EAAAC,EAAAC,cAAA,WAJnB,WAKalH,EAAMgH,EAAAC,EAAAC,cAAA,WACd5G,EAAO,QAAU,cAAc0G,EAAAC,EAAAC,cAAA,WAChCF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,MAAM,OAAOC,QAAS,kBD3ClD5C,sBAAsBL,QACtBH,GAAY,KC0CQ,gBAGRyC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBAAwBJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQG,UAAQ,EAACC,UAAQ,EAACH,MAAM,SAASI,KAAK,eAAeC,KAAK,UAAUJ,QAAS,kBAAMZ,EAAc,SAChJC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBAAwBJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQG,UAAQ,EAACC,UAAQ,EAACH,MAAM,SAASI,KAAK,OAAOC,KAAK,UAAUJ,QAAS,kBAAMZ,EAAc,eAE5IC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBAAwBJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQG,UAAQ,EAACC,UAAQ,EAACH,MAAM,OAAOI,KAAK,aAAaC,KAAK,UAAUJ,QAAS,kBAAMZ,EAAc,YAC5IC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBAAwBJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQG,UAAQ,EAACC,UAAQ,EAACH,MAAM,OAAOI,KAAK,cAAcC,KAAK,UAAUJ,QAAS,kBAAMZ,EAAc,cAEjJC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQG,UAAQ,EAACC,UAAQ,EAACH,MAAM,MAAMI,KAAK,aAAaC,KAAK,UAAUC,YAAa,kBAAMjB,EAAc,wBC5EhIkB,IAASC,OACLlB,EAAAC,EAAAC,cAACiB,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.f6d59f90.chunk.js","sourcesContent":["//Game Settings\r\nexport const HEIGHT = 20;\r\nexport const WIDTH = 10;\r\n\r\n//Color Settings;\r\nexport const BACKGROUND_COLOR = \"white\";\r\n\r\n//Cell colors\r\nexport const ONE = \"green\";\r\nexport const TWO = \"blue\";\r\nexport const THREE = \"orange\";\r\nexport const FOUR = \"purple\";\r\nexport const FIVE = \"cyan\";\r\nexport const SIX = \"yellow\";\r\nexport const SEVEN = \"red\";\r\n","import {HEIGHT, WIDTH, BACKGROUND_COLOR} from \"./settings\";\r\n\r\nclass Grid {\r\n    livingCell = false;\r\n    intScore = 0;\r\n    score = 0;\r\n    previousScore = 0;\r\n    level = 1;\r\n    constructor(){\r\n        this.grid = Grid.generateGrid([]);\r\n        this.deadGrid = Grid.generateGrid([]);\r\n        this.lost = false;\r\n    }\r\n\r\n    setScore(n){\r\n        this.score += n * this.level;\r\n        this.intScore += n;\r\n        if (this.intScore > this.previousScore + 50){\r\n            this.level++;\r\n            this.previousScore += 50 + (this.intScore - (this.previousScore+50));\r\n        }\r\n    }\r\n\r\n    setLost(){\r\n        this.lost = true;\r\n    }\r\n\r\n    wipeActiveGrid(){\r\n        this.grid = this.deadGrid.map(r => r.map(c => c));\r\n    }\r\n\r\n    renderCelltoGrid(Cell){\r\n        if(this.livingCell && !this.lost){\r\n            let { cell, cellHeight, cellWidth, rowPos, colPos, isAlive} = Cell;\r\n            if (isAlive){\r\n                let tempGrid = this.deadGrid.map(r => r.map(c => c));\r\n                let nbRow = (cellHeight-1 > rowPos) ? rowPos+1 : cellHeight;\r\n                for (let i = 0; i < nbRow; i++){\r\n                    for (let j = colPos; j < colPos + cellWidth; j++){\r\n                        if(cell[cellHeight-1 - i][j - colPos] !== BACKGROUND_COLOR){\r\n                            tempGrid[rowPos-i][j] = cell[cellHeight-1 - i][j - colPos];\r\n                        }\r\n                    }\r\n                }\r\n                this.grid = tempGrid;\r\n            }\r\n            else if (!isAlive) {\r\n                this.deadGrid = this.grid.map(r => r.map(c => c));\r\n            }\r\n        }\r\n    }\r\n\r\n    addCell(){\r\n        if(!this.livingCell && !this.lost){\r\n            this.livingCell = true;\r\n        }\r\n    }\r\n\r\n    static generateGrid(grid){\r\n        let genGrid = [];\r\n        for (let i = grid.length; i < HEIGHT; i++){\r\n            let row = [];\r\n            for (let j = 0; j < WIDTH; j++){\r\n                row = [ ...row, BACKGROUND_COLOR];\r\n            }\r\n            genGrid = [ ...genGrid, row];\r\n        }\r\n        return [...genGrid, ...grid];\r\n    }\r\n\r\n    handleRowDestruction(){\r\n        let tempGrid = this.grid.map(row => row.map(square => square));\r\n        const lineToDestruct = tempGrid.reduce((tab, row, index) => {\r\n            const compute = row.filter((cell, index, row) => row && cell !== \"white\");\r\n            if (compute.length === WIDTH) tab = [...tab, index];\r\n            return tab;\r\n        }, []);\r\n        lineToDestruct.reverse();\r\n        this.setScore(lineToDestruct.length * lineToDestruct.length);\r\n        lineToDestruct.forEach(line => tempGrid.splice(line,1));\r\n        if (tempGrid !== this.grid) this.grid = tempGrid;\r\n        this.grid = Grid.generateGrid(this.grid).map(row => row.map(square => square));\r\n        this.deadGrid = this.grid;\r\n    }\r\n}\r\n\r\nexport default Grid;","import {BACKGROUND_COLOR, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN} from \"./settings\";\r\n\r\nexport const blank = ([\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n]);\r\n\r\nexport const one = ([\r\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [ONE, ONE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const two = ([\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [TWO, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const three = (\r\n    [[BACKGROUND_COLOR, THREE, THREE, BACKGROUND_COLOR],\r\n    [THREE, THREE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]]\r\n);\r\n\r\nexport const four = ([\r\n    [FOUR, FOUR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, FOUR, FOUR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const five = ([\r\n    [BACKGROUND_COLOR, FIVE, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [FIVE, FIVE, FIVE, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const six = ([\r\n    [SIX, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [SIX, SIX, SIX, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);\r\n\r\nexport const seven = ([\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, SEVEN, BACKGROUND_COLOR],\r\n    [SEVEN, SEVEN, SEVEN, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR],\r\n    [BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR, BACKGROUND_COLOR]\r\n    ]);","import {BACKGROUND_COLOR, WIDTH, HEIGHT} from \"./settings\";\r\n\r\nimport * as Cells from \"./cellCollection\";\r\n\r\nclass Cell{\r\n    static previousCell = null;\r\n\r\n    cell = null;\r\n    isAlive = true;\r\n\r\n    cellHeight = 0;\r\n    cellWidth = 0;\r\n    rowPos = -1;\r\n\r\n    constructor (deadGrid = null){\r\n        this.randomCellSelection();\r\n        this.findCellSize();\r\n        this.colPos = Math.floor(Math.random() * (WIDTH - this.cellWidth+1));\r\n        if (deadGrid && this.willCollide(deadGrid, this.rowPos+1,this.colPos)) this.cell = null;\r\n    }\r\n\r\n    moveLeft(deadGrid){\r\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos-1)){\r\n            this.prevCol = this.colPos;\r\n            this.colPos--;\r\n        }\r\n    }\r\n\r\n    moveRight(deadGrid){\r\n        if (!this.willCollide(deadGrid, this.rowPos, this.colPos+1)){\r\n            this.prevCol = this.colPos;\r\n            this.colPos++;\r\n        }\r\n    }\r\n\r\n    moveDown(grid){\r\n        if (this.willCollide(grid.deadGrid, this.rowPos+1, this.colPos)) {\r\n            this.isAlive = false;\r\n            if(this.rowPos < this.cellHeight-1) grid.setLost();\r\n        }\r\n        else {\r\n            this.prevRow = this.rowPos;\r\n            this.rowPos += 1;\r\n        }\r\n    }\r\n\r\n    rotate(deadGrid){\r\n        let newCell = [\r\n            [\"white\", \"white\", \"white\", \"white\"],\r\n            [\"white\", \"white\", \"white\", \"white\"],\r\n            [\"white\", \"white\", \"white\", \"white\"],\r\n            [\"white\", \"white\", \"white\", \"white\"]\r\n        ];\r\n        let tempCell = this.cell.map(r => r.map(sq => sq));\r\n\r\n        for(let i = this.cellHeight; i > 0; i--){\r\n            for(let j = this.cellWidth; j > 0; j--){\r\n                newCell[this.cellWidth- j][this.cellHeight - i] = tempCell[i-1][this.cellWidth - j];\r\n            }\r\n        }\r\n        let currentCell = this.cell.map(r => r.map(sq => sq));\r\n        this.cell = newCell.map(r => r.map(sq => sq));\r\n        this.findCellSize();\r\n        if(this.willCollide(deadGrid, this.rowPos, this.colPos)){\r\n            this.cell = currentCell.map(r => r.map(sq => sq));\r\n            this.findCellSize();\r\n        }\r\n    }\r\n\r\n    willCollide(deadGrid, row, col){\r\n        if (WIDTH - this.cellWidth < col || col < 0 || row > HEIGHT-1)\r\n            return true;\r\n        let nbRow = (this.cellHeight-1 > row) ? row : this.cellHeight;\r\n        for (let i = 0; i < nbRow; i++){\r\n            for (let j = 0; j < this.cellWidth; j++){\r\n                if(deadGrid[row - i][col + j] !== BACKGROUND_COLOR &&\r\n                    this.cell[this.cellHeight-1 - i][j] !== BACKGROUND_COLOR){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    findCellSize (){\r\n        //Cell Height\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                if (this.cell[i][j] !== BACKGROUND_COLOR) {\r\n                    this.cellHeight = i+1;\r\n                }\r\n            }\r\n        }\r\n        //Cell Width\r\n        for (let k = 0; k < 4; k++) {\r\n            for (let l = 0; l < 4; l++) {\r\n                if (this.cell[l][k] !== BACKGROUND_COLOR) {\r\n                    this.cellWidth = k+1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetRow(){\r\n        this.rowPos = -1;\r\n    }\r\n    randomCellSelection (){\r\n        let random = null;\r\n        do {\r\n            random = Math.floor(Math.random() * Math.floor(7));\r\n        } while (random === Cell.previousCell);\r\n        Cell.previousCell = random;\r\n        switch (random) {\r\n            case 0:\r\n                this.cell = Cells.one;\r\n                break;\r\n            case 1:\r\n                this.cell = Cells.two;\r\n                break;\r\n            case 2:\r\n                this.cell = Cells.three;\r\n                break;\r\n            case 3:\r\n                this.cell = Cells.four;\r\n                break;\r\n            case 4:\r\n                this.cell = Cells.five;\r\n                break;\r\n            case 5:\r\n                this.cell = Cells.six;\r\n                break;\r\n            case 6:\r\n                this.cell = Cells.seven;\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n}\r\n\r\nexport default Cell;","import Grid from '../game/Grid';\r\nimport Cell from \"../game/Cell\";\r\nimport {blank} from \"./cellCollection\";\r\n\r\nconst gameGrid = new Grid();\r\nlet cell = new Cell();\r\nlet nextCell = new Cell();\r\nlet savedCell = {cell: blank};\r\nlet isSavedCell = false;\r\nlet isStarted = false;\r\ngameGrid.addCell();\r\n\r\nlet last = 0;\r\n\r\nfunction mainLoop(timestamp){\r\n    let dif = gameGrid.level < 10 ? gameGrid.level*120 : 100;\r\n    if(cell){\r\n        let current = timestamp;\r\n        if(current - last > 1200 - dif){\r\n            Game('DOWN');\r\n            last = current;\r\n        }\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n}\r\n\r\nexport const start = () => {\r\n    requestAnimationFrame(mainLoop);\r\n    isStarted = true;\r\n};\r\n\r\nexport function Game(move){\r\n    if(!cell.isAlive) {\r\n        cell = nextCell;\r\n        nextCell = new Cell(gameGrid.deadGrid);\r\n    }\r\n    if(cell && isStarted){\r\n        switch (move) {\r\n            case 'a':\r\n                if (isSavedCell) {\r\n                    let tempCell = savedCell;\r\n                    savedCell = cell;\r\n                    cell = tempCell;\r\n                    savedCell.resetRow();\r\n                }\r\n                else {\r\n                    gameGrid.wipeActiveGrid();\r\n                    savedCell = cell;\r\n                    savedCell.resetRow();\r\n                    cell = new Cell(gameGrid.deadGrid);\r\n                    isSavedCell = true;\r\n                }\r\n                break;\r\n            case 's':\r\n            case 'DOWN':\r\n                cell.moveDown(gameGrid);\r\n                break;\r\n            case 'd':\r\n            case 'RIGHT':\r\n                cell.moveRight(gameGrid.deadGrid);\r\n                break;\r\n            case 'q':\r\n            case 'LEFT':\r\n                cell.moveLeft(gameGrid.deadGrid);\r\n                break;\r\n            case 'z':\r\n            case 'ROTATE':\r\n                cell.rotate(gameGrid.deadGrid);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n    gameGrid.renderCelltoGrid(cell);\r\n    if(!cell.isAlive) gameGrid.handleRowDestruction();\r\n    return {...gameGrid, ...nextCell, savedCell };\r\n}","import React,{useState, useEffect} from 'react';\r\nimport { Game, start } from \"../game/Main\";\r\n\r\nimport { Button } from 'semantic-ui-react';\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nconst App = () => {\r\n    const [grid, setGrid] = useState([ ...Game().grid]);\r\n    const [lost, setLost] = useState(Game().lost);\r\n    const [score, setScore] = useState(Game().score);\r\n    const [level, setLevel] = useState(Game().level);\r\n    const [nextCell, setNextCell] = useState(Game().cell);\r\n    const [savedCell, setSavedCell] = useState(Game().savedCell.cell);\r\n    const game = move => Game(move);\r\n\r\n    //Next Cell\r\n    useEffect(() =>{\r\n        setSavedCell(Game().savedCell.cell);\r\n    }, [Game().savedCell.cell]);\r\n\r\n    //Next Cell\r\n    useEffect(() =>{\r\n        setNextCell(Game().cell);\r\n    }, [Game().cell]);\r\n\r\n    //Level\r\n    useEffect(() =>{\r\n        setLevel(game().level);\r\n    }, [game().level]);\r\n\r\n    //Grid\r\n    useEffect(() =>{\r\n        setGrid(game().grid);\r\n    }, [game().grid]);\r\n\r\n    //Lost\r\n    useEffect(() =>{\r\n        setLost(game().lost);\r\n    }, [game().lost]);\r\n\r\n    //Score\r\n    useEffect(() =>{\r\n        setScore(game().score);\r\n    }, [game().score]);\r\n\r\n    const handleOnClick = move =>{\r\n        game(move);\r\n    };\r\n\r\n    const handleKeyPress = e =>{\r\n        game(e.key);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"game\" onKeyDown={handleKeyPress}>\r\n                <div className=\"game-grid\">\r\n                    <div className=\"left-info\">\r\n                        {savedCell.map((r,i) => <p>{ r.map( (c, ci) => <b className={c}/>)}</p> )}\r\n                    </div>\r\n                    <div className=\"centeredgame\">\r\n                        {grid.map((r,i) => <p key={`r${i}`}>{ r.map( (c, ci) => <b className={c} key={`${i}${ci}`}/>)}</p> )}\r\n                    </div>\r\n                    <div className=\"right-info\">\r\n                        <div className=\"next-cell\">\r\n                            {nextCell.map(r =><p>{ r.map(sq => <b className={sq}/>)}</p>)}<br/>\r\n                        </div>\r\n                        Level : {level}<br/>\r\n                        Score : {score}<br/>\r\n                        {lost ? \"PERDU\" : \"En Cours...\"}<br/>\r\n                        <Button color=\"teal\" onClick={() => start()}>START GAME</Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controls\">\r\n                    <div className=\"ui centered grid\">\r\n                        <div className=\"two column column centered row\">\r\n                            <div className=\"column center aligned\"><Button circular inverted color=\"orange\" icon=\"save outline\" size=\"massive\" onClick={() => handleOnClick('a')} /></div>\r\n                            <div className=\"column center aligned\"><Button circular inverted color=\"purple\" icon=\"redo\" size=\"massive\" onClick={() => handleOnClick('ROTATE')} /></div>\r\n                        </div>\r\n                        <div className=\"two column column centered row\">\r\n                            <div className=\"column center aligned\"><Button circular inverted color=\"teal\" icon=\"angle left\" size=\"massive\" onClick={() => handleOnClick('LEFT')} /></div>\r\n                            <div className=\"column center aligned\"><Button circular inverted color=\"teal\" icon=\"angle right\" size=\"massive\" onClick={() => handleOnClick('RIGHT')} /></div>\r\n                        </div>\r\n                        <Button circular inverted color=\"red\" icon=\"angle down\" size=\"massive\" onMouseDown={() => handleOnClick('DOWN')} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nimport './index.css';\r\n\r\nReactDom.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}